//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LiveIDEnum = {
  'Hotsoon' : 0,
  'Aweme' : 1,
  'Xigua' : 3,
  'Hypstar' : 11,
  'Tiktok' : 12,
  'PPX' : 1001,
  'Helo' : 53,
  'Learning' : 1002,
  'ByteLive' : 1003
};
AppIDEnum = {
  'Touxiao' : 13,
  'Xigua' : 32,
  'Hotsoon' : 1112,
  'Aweme' : 1128,
  'PPX' : 1319,
  'ToutiaoLite' : 35,
  'ToutiaoSocial' : 19,
  'Helo' : 1342,
  'Vigo' : 1145,
  'TikTok' : 1180,
  'Musically' : 1233,
  'XiguaPc' : 1559,
  'ByteLive' : 2098
};
RequestFromEnum = {
  'Undefined' : 0,
  'RoomAdmin' : 1,
  'LivePushSettings' : 2,
  'ProfileCard' : 3
};
GameKindEnum = {
  'Effect' : 1,
  'Wmini' : 2,
  'Wgamex' : 3,
  'Cloud' : 4
};
Address = function(args) {
  this.Country = null;
  this.Province = null;
  this.City = null;
  this.Latitude = null;
  this.Longitude = null;
  this.CityCode = null;
  this.CountryCode = null;
  if (args) {
    if (args.Country !== undefined) {
      this.Country = args.Country;
    }
    if (args.Province !== undefined) {
      this.Province = args.Province;
    }
    if (args.City !== undefined) {
      this.City = args.City;
    }
    if (args.Latitude !== undefined) {
      this.Latitude = args.Latitude;
    }
    if (args.Longitude !== undefined) {
      this.Longitude = args.Longitude;
    }
    if (args.CityCode !== undefined) {
      this.CityCode = args.CityCode;
    }
    if (args.CountryCode !== undefined) {
      this.CountryCode = args.CountryCode;
    }
  }
};
Address.prototype = {};
Address.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Province = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.City = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Latitude = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.Longitude = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.CityCode = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.CountryCode = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Address.prototype.write = function(output) {
  output.writeStructBegin('Address');
  if (this.Country !== null && this.Country !== undefined) {
    output.writeFieldBegin('Country', Thrift.Type.STRING, 1);
    output.writeString(this.Country);
    output.writeFieldEnd();
  }
  if (this.Province !== null && this.Province !== undefined) {
    output.writeFieldBegin('Province', Thrift.Type.STRING, 2);
    output.writeString(this.Province);
    output.writeFieldEnd();
  }
  if (this.City !== null && this.City !== undefined) {
    output.writeFieldBegin('City', Thrift.Type.STRING, 3);
    output.writeString(this.City);
    output.writeFieldEnd();
  }
  if (this.Latitude !== null && this.Latitude !== undefined) {
    output.writeFieldBegin('Latitude', Thrift.Type.STRING, 4);
    output.writeString(this.Latitude);
    output.writeFieldEnd();
  }
  if (this.Longitude !== null && this.Longitude !== undefined) {
    output.writeFieldBegin('Longitude', Thrift.Type.STRING, 5);
    output.writeString(this.Longitude);
    output.writeFieldEnd();
  }
  if (this.CityCode !== null && this.CityCode !== undefined) {
    output.writeFieldBegin('CityCode', Thrift.Type.I64, 6);
    output.writeI64(this.CityCode);
    output.writeFieldEnd();
  }
  if (this.CountryCode !== null && this.CountryCode !== undefined) {
    output.writeFieldBegin('CountryCode', Thrift.Type.I64, 7);
    output.writeI64(this.CountryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Location = function(args) {
  this.GPS = null;
  this.IP = null;
  this.Latitude = null;
  this.Longitude = null;
  if (args) {
    if (args.GPS !== undefined) {
      this.GPS = args.GPS;
    }
    if (args.IP !== undefined) {
      this.IP = args.IP;
    }
    if (args.Latitude !== undefined) {
      this.Latitude = args.Latitude;
    }
    if (args.Longitude !== undefined) {
      this.Longitude = args.Longitude;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.GPS = new Address();
        this.GPS.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.IP = new Address();
        this.IP.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.Longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.GPS !== null && this.GPS !== undefined) {
    output.writeFieldBegin('GPS', Thrift.Type.STRUCT, 1);
    this.GPS.write(output);
    output.writeFieldEnd();
  }
  if (this.IP !== null && this.IP !== undefined) {
    output.writeFieldBegin('IP', Thrift.Type.STRUCT, 2);
    this.IP.write(output);
    output.writeFieldEnd();
  }
  if (this.Latitude !== null && this.Latitude !== undefined) {
    output.writeFieldBegin('Latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.Latitude);
    output.writeFieldEnd();
  }
  if (this.Longitude !== null && this.Longitude !== undefined) {
    output.writeFieldBegin('Longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.Longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationV2 = function(args) {
  this.GPS = null;
  this.IP = null;
  if (args) {
    if (args.GPS !== undefined) {
      this.GPS = args.GPS;
    }
    if (args.IP !== undefined) {
      this.IP = args.IP;
    }
  }
};
LocationV2.prototype = {};
LocationV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.GPS = new Address();
        this.GPS.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.IP = new Address();
        this.IP.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationV2.prototype.write = function(output) {
  output.writeStructBegin('LocationV2');
  if (this.GPS !== null && this.GPS !== undefined) {
    output.writeFieldBegin('GPS', Thrift.Type.STRUCT, 1);
    this.GPS.write(output);
    output.writeFieldEnd();
  }
  if (this.IP !== null && this.IP !== undefined) {
    output.writeFieldBegin('IP', Thrift.Type.STRUCT, 2);
    this.IP.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LocationManager = function(args) {
  this.Locale = null;
  this.SysLocale = null;
  this.Region = null;
  this.SysRegion = null;
  this.Location = null;
  if (args) {
    if (args.Locale !== undefined) {
      this.Locale = args.Locale;
    }
    if (args.SysLocale !== undefined) {
      this.SysLocale = args.SysLocale;
    }
    if (args.Region !== undefined) {
      this.Region = args.Region;
    }
    if (args.SysRegion !== undefined) {
      this.SysRegion = args.SysRegion;
    }
    if (args.Location !== undefined) {
      this.Location = args.Location;
    }
  }
};
LocationManager.prototype = {};
LocationManager.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Locale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.SysLocale = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.SysRegion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.Location = new Location();
        this.Location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LocationManager.prototype.write = function(output) {
  output.writeStructBegin('LocationManager');
  if (this.Locale !== null && this.Locale !== undefined) {
    output.writeFieldBegin('Locale', Thrift.Type.STRING, 1);
    output.writeString(this.Locale);
    output.writeFieldEnd();
  }
  if (this.SysLocale !== null && this.SysLocale !== undefined) {
    output.writeFieldBegin('SysLocale', Thrift.Type.STRING, 2);
    output.writeString(this.SysLocale);
    output.writeFieldEnd();
  }
  if (this.Region !== null && this.Region !== undefined) {
    output.writeFieldBegin('Region', Thrift.Type.STRING, 3);
    output.writeString(this.Region);
    output.writeFieldEnd();
  }
  if (this.SysRegion !== null && this.SysRegion !== undefined) {
    output.writeFieldBegin('SysRegion', Thrift.Type.STRING, 4);
    output.writeString(this.SysRegion);
    output.writeFieldEnd();
  }
  if (this.Location !== null && this.Location !== undefined) {
    output.writeFieldBegin('Location', Thrift.Type.STRUCT, 5);
    this.Location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Image = function(args) {
  this.Uri = null;
  this.UrlList = null;
  this.Status = null;
  this.Width = null;
  this.Height = null;
  this.AvgColor = null;
  if (args) {
    if (args.Uri !== undefined) {
      this.Uri = args.Uri;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Uri is unset!');
    }
    if (args.UrlList !== undefined) {
      this.UrlList = args.UrlList;
    }
    if (args.Status !== undefined) {
      this.Status = args.Status;
    }
    if (args.Width !== undefined) {
      this.Width = args.Width;
    }
    if (args.Height !== undefined) {
      this.Height = args.Height;
    }
    if (args.AvgColor !== undefined) {
      this.AvgColor = args.AvgColor;
    }
  }
};
Image.prototype = {};
Image.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.UrlList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.UrlList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.Status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.Width = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.Height = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.AvgColor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Image.prototype.write = function(output) {
  output.writeStructBegin('Image');
  if (this.Uri !== null && this.Uri !== undefined) {
    output.writeFieldBegin('Uri', Thrift.Type.STRING, 1);
    output.writeString(this.Uri);
    output.writeFieldEnd();
  }
  if (this.UrlList !== null && this.UrlList !== undefined) {
    output.writeFieldBegin('UrlList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.UrlList.length);
    for (var iter7 in this.UrlList)
    {
      if (this.UrlList.hasOwnProperty(iter7))
      {
        iter7 = this.UrlList[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Status !== null && this.Status !== undefined) {
    output.writeFieldBegin('Status', Thrift.Type.I32, 3);
    output.writeI32(this.Status);
    output.writeFieldEnd();
  }
  if (this.Width !== null && this.Width !== undefined) {
    output.writeFieldBegin('Width', Thrift.Type.I32, 4);
    output.writeI32(this.Width);
    output.writeFieldEnd();
  }
  if (this.Height !== null && this.Height !== undefined) {
    output.writeFieldBegin('Height', Thrift.Type.I32, 5);
    output.writeI32(this.Height);
    output.writeFieldEnd();
  }
  if (this.AvgColor !== null && this.AvgColor !== undefined) {
    output.writeFieldBegin('AvgColor', Thrift.Type.STRING, 6);
    output.writeString(this.AvgColor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Text = function(args) {
  this.Content = null;
  this.TextKey = null;
  this.TextColor = null;
  if (args) {
    if (args.Content !== undefined) {
      this.Content = args.Content;
    }
    if (args.TextKey !== undefined) {
      this.TextKey = args.TextKey;
    }
    if (args.TextColor !== undefined) {
      this.TextColor = args.TextColor;
    }
  }
};
Text.prototype = {};
Text.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.TextKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.TextColor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Text.prototype.write = function(output) {
  output.writeStructBegin('Text');
  if (this.Content !== null && this.Content !== undefined) {
    output.writeFieldBegin('Content', Thrift.Type.STRING, 1);
    output.writeString(this.Content);
    output.writeFieldEnd();
  }
  if (this.TextKey !== null && this.TextKey !== undefined) {
    output.writeFieldBegin('TextKey', Thrift.Type.STRING, 2);
    output.writeString(this.TextKey);
    output.writeFieldEnd();
  }
  if (this.TextColor !== null && this.TextColor !== undefined) {
    output.writeFieldBegin('TextColor', Thrift.Type.STRING, 3);
    output.writeString(this.TextColor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestInfo = function(args) {
  this.RequestFrom = null;
  this.ClientIP = null;
  this.LocationInfo = null;
  this.UserID = null;
  this.OdinUid = null;
  this.OdinUidType = null;
  this.OdinUserIsAuth = null;
  this.RegisterTime = 0;
  this.DeviceRegisterTime = 0;
  this.FirstInstallTime = 0;
  this.LaunchHistory = 0;
  this.UserAgent = '';
  this.AppID = null;
  this.AppName = null;
  this.ProductID = null;
  this.VersionCode = null;
  this.UpdateVersionCode = null;
  this.Channel = null;
  this.IsAppUnderAudit = null;
  this.Language = null;
  this.Region = null;
  this.ChannelID = null;
  this.DeviceID = null;
  this.ClientVersion = null;
  this.DevicePlatform = null;
  this.LiveSdkVersion = null;
  this.DeviceType = null;
  this.DeviceBrand = null;
  this.Resolution = null;
  this.TrafficType = '';
  this.OsVersion = '';
  this.Uuid = '';
  this.Idfa = '';
  this.OpenUdid = '';
  this.AbParams = null;
  this.Attrs = null;
  if (args) {
    if (args.RequestFrom !== undefined) {
      this.RequestFrom = args.RequestFrom;
    }
    if (args.ClientIP !== undefined) {
      this.ClientIP = args.ClientIP;
    }
    if (args.LocationInfo !== undefined) {
      this.LocationInfo = args.LocationInfo;
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    }
    if (args.OdinUid !== undefined) {
      this.OdinUid = args.OdinUid;
    }
    if (args.OdinUidType !== undefined) {
      this.OdinUidType = args.OdinUidType;
    }
    if (args.OdinUserIsAuth !== undefined) {
      this.OdinUserIsAuth = args.OdinUserIsAuth;
    }
    if (args.RegisterTime !== undefined) {
      this.RegisterTime = args.RegisterTime;
    }
    if (args.DeviceRegisterTime !== undefined) {
      this.DeviceRegisterTime = args.DeviceRegisterTime;
    }
    if (args.FirstInstallTime !== undefined) {
      this.FirstInstallTime = args.FirstInstallTime;
    }
    if (args.LaunchHistory !== undefined) {
      this.LaunchHistory = args.LaunchHistory;
    }
    if (args.UserAgent !== undefined) {
      this.UserAgent = args.UserAgent;
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    }
    if (args.AppName !== undefined) {
      this.AppName = args.AppName;
    }
    if (args.ProductID !== undefined) {
      this.ProductID = args.ProductID;
    }
    if (args.VersionCode !== undefined) {
      this.VersionCode = args.VersionCode;
    }
    if (args.UpdateVersionCode !== undefined) {
      this.UpdateVersionCode = args.UpdateVersionCode;
    }
    if (args.Channel !== undefined) {
      this.Channel = args.Channel;
    }
    if (args.IsAppUnderAudit !== undefined) {
      this.IsAppUnderAudit = args.IsAppUnderAudit;
    }
    if (args.Language !== undefined) {
      this.Language = args.Language;
    }
    if (args.Region !== undefined) {
      this.Region = args.Region;
    }
    if (args.ChannelID !== undefined) {
      this.ChannelID = args.ChannelID;
    }
    if (args.DeviceID !== undefined) {
      this.DeviceID = args.DeviceID;
    }
    if (args.ClientVersion !== undefined) {
      this.ClientVersion = args.ClientVersion;
    }
    if (args.DevicePlatform !== undefined) {
      this.DevicePlatform = args.DevicePlatform;
    }
    if (args.LiveSdkVersion !== undefined) {
      this.LiveSdkVersion = args.LiveSdkVersion;
    }
    if (args.DeviceType !== undefined) {
      this.DeviceType = args.DeviceType;
    }
    if (args.DeviceBrand !== undefined) {
      this.DeviceBrand = args.DeviceBrand;
    }
    if (args.Resolution !== undefined) {
      this.Resolution = args.Resolution;
    }
    if (args.TrafficType !== undefined) {
      this.TrafficType = args.TrafficType;
    }
    if (args.OsVersion !== undefined) {
      this.OsVersion = args.OsVersion;
    }
    if (args.Uuid !== undefined) {
      this.Uuid = args.Uuid;
    }
    if (args.Idfa !== undefined) {
      this.Idfa = args.Idfa;
    }
    if (args.OpenUdid !== undefined) {
      this.OpenUdid = args.OpenUdid;
    }
    if (args.AbParams !== undefined) {
      this.AbParams = args.AbParams;
    }
    if (args.Attrs !== undefined) {
      this.Attrs = args.Attrs;
    }
  }
};
RequestInfo.prototype = {};
RequestInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.RequestFrom = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ClientIP = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.LocationInfo = new LocationManager();
        this.LocationInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.OdinUid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.OdinUidType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.OdinUserIsAuth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.RegisterTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.DeviceRegisterTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.FirstInstallTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.LaunchHistory = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.UserAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.AppID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.AppName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.ProductID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.VersionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.UpdateVersionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.Channel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.IsAppUnderAudit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.Language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.Region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.ChannelID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.DeviceID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I64) {
        this.ClientVersion = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRING) {
        this.DevicePlatform = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I64) {
        this.LiveSdkVersion = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceBrand = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRING) {
        this.Resolution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRING) {
        this.TrafficType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRING) {
        this.OsVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.Uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRING) {
        this.Idfa = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRING) {
        this.OpenUdid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.AbParams = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readString().value;
          this.AbParams[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.Attrs = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          if (_i21 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key22 = null;
          var val23 = null;
          key22 = input.readString().value;
          val23 = input.readString().value;
          this.Attrs[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestInfo.prototype.write = function(output) {
  output.writeStructBegin('RequestInfo');
  if (this.RequestFrom !== null && this.RequestFrom !== undefined) {
    output.writeFieldBegin('RequestFrom', Thrift.Type.I32, 1);
    output.writeI32(this.RequestFrom);
    output.writeFieldEnd();
  }
  if (this.ClientIP !== null && this.ClientIP !== undefined) {
    output.writeFieldBegin('ClientIP', Thrift.Type.STRING, 2);
    output.writeString(this.ClientIP);
    output.writeFieldEnd();
  }
  if (this.LocationInfo !== null && this.LocationInfo !== undefined) {
    output.writeFieldBegin('LocationInfo', Thrift.Type.STRUCT, 3);
    this.LocationInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 11);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.OdinUid !== null && this.OdinUid !== undefined) {
    output.writeFieldBegin('OdinUid', Thrift.Type.I64, 12);
    output.writeI64(this.OdinUid);
    output.writeFieldEnd();
  }
  if (this.OdinUidType !== null && this.OdinUidType !== undefined) {
    output.writeFieldBegin('OdinUidType', Thrift.Type.I32, 13);
    output.writeI32(this.OdinUidType);
    output.writeFieldEnd();
  }
  if (this.OdinUserIsAuth !== null && this.OdinUserIsAuth !== undefined) {
    output.writeFieldBegin('OdinUserIsAuth', Thrift.Type.I32, 14);
    output.writeI32(this.OdinUserIsAuth);
    output.writeFieldEnd();
  }
  if (this.RegisterTime !== null && this.RegisterTime !== undefined) {
    output.writeFieldBegin('RegisterTime', Thrift.Type.I64, 15);
    output.writeI64(this.RegisterTime);
    output.writeFieldEnd();
  }
  if (this.DeviceRegisterTime !== null && this.DeviceRegisterTime !== undefined) {
    output.writeFieldBegin('DeviceRegisterTime', Thrift.Type.I64, 16);
    output.writeI64(this.DeviceRegisterTime);
    output.writeFieldEnd();
  }
  if (this.FirstInstallTime !== null && this.FirstInstallTime !== undefined) {
    output.writeFieldBegin('FirstInstallTime', Thrift.Type.I64, 17);
    output.writeI64(this.FirstInstallTime);
    output.writeFieldEnd();
  }
  if (this.LaunchHistory !== null && this.LaunchHistory !== undefined) {
    output.writeFieldBegin('LaunchHistory', Thrift.Type.I32, 18);
    output.writeI32(this.LaunchHistory);
    output.writeFieldEnd();
  }
  if (this.UserAgent !== null && this.UserAgent !== undefined) {
    output.writeFieldBegin('UserAgent', Thrift.Type.STRING, 19);
    output.writeString(this.UserAgent);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I64, 21);
    output.writeI64(this.AppID);
    output.writeFieldEnd();
  }
  if (this.AppName !== null && this.AppName !== undefined) {
    output.writeFieldBegin('AppName', Thrift.Type.STRING, 22);
    output.writeString(this.AppName);
    output.writeFieldEnd();
  }
  if (this.ProductID !== null && this.ProductID !== undefined) {
    output.writeFieldBegin('ProductID', Thrift.Type.I32, 23);
    output.writeI32(this.ProductID);
    output.writeFieldEnd();
  }
  if (this.VersionCode !== null && this.VersionCode !== undefined) {
    output.writeFieldBegin('VersionCode', Thrift.Type.STRING, 24);
    output.writeString(this.VersionCode);
    output.writeFieldEnd();
  }
  if (this.UpdateVersionCode !== null && this.UpdateVersionCode !== undefined) {
    output.writeFieldBegin('UpdateVersionCode', Thrift.Type.STRING, 25);
    output.writeString(this.UpdateVersionCode);
    output.writeFieldEnd();
  }
  if (this.Channel !== null && this.Channel !== undefined) {
    output.writeFieldBegin('Channel', Thrift.Type.STRING, 26);
    output.writeString(this.Channel);
    output.writeFieldEnd();
  }
  if (this.IsAppUnderAudit !== null && this.IsAppUnderAudit !== undefined) {
    output.writeFieldBegin('IsAppUnderAudit', Thrift.Type.BOOL, 27);
    output.writeBool(this.IsAppUnderAudit);
    output.writeFieldEnd();
  }
  if (this.Language !== null && this.Language !== undefined) {
    output.writeFieldBegin('Language', Thrift.Type.STRING, 28);
    output.writeString(this.Language);
    output.writeFieldEnd();
  }
  if (this.Region !== null && this.Region !== undefined) {
    output.writeFieldBegin('Region', Thrift.Type.STRING, 29);
    output.writeString(this.Region);
    output.writeFieldEnd();
  }
  if (this.ChannelID !== null && this.ChannelID !== undefined) {
    output.writeFieldBegin('ChannelID', Thrift.Type.I64, 30);
    output.writeI64(this.ChannelID);
    output.writeFieldEnd();
  }
  if (this.DeviceID !== null && this.DeviceID !== undefined) {
    output.writeFieldBegin('DeviceID', Thrift.Type.I64, 41);
    output.writeI64(this.DeviceID);
    output.writeFieldEnd();
  }
  if (this.ClientVersion !== null && this.ClientVersion !== undefined) {
    output.writeFieldBegin('ClientVersion', Thrift.Type.I64, 42);
    output.writeI64(this.ClientVersion);
    output.writeFieldEnd();
  }
  if (this.DevicePlatform !== null && this.DevicePlatform !== undefined) {
    output.writeFieldBegin('DevicePlatform', Thrift.Type.STRING, 43);
    output.writeString(this.DevicePlatform);
    output.writeFieldEnd();
  }
  if (this.LiveSdkVersion !== null && this.LiveSdkVersion !== undefined) {
    output.writeFieldBegin('LiveSdkVersion', Thrift.Type.I64, 44);
    output.writeI64(this.LiveSdkVersion);
    output.writeFieldEnd();
  }
  if (this.DeviceType !== null && this.DeviceType !== undefined) {
    output.writeFieldBegin('DeviceType', Thrift.Type.STRING, 45);
    output.writeString(this.DeviceType);
    output.writeFieldEnd();
  }
  if (this.DeviceBrand !== null && this.DeviceBrand !== undefined) {
    output.writeFieldBegin('DeviceBrand', Thrift.Type.STRING, 46);
    output.writeString(this.DeviceBrand);
    output.writeFieldEnd();
  }
  if (this.Resolution !== null && this.Resolution !== undefined) {
    output.writeFieldBegin('Resolution', Thrift.Type.STRING, 47);
    output.writeString(this.Resolution);
    output.writeFieldEnd();
  }
  if (this.TrafficType !== null && this.TrafficType !== undefined) {
    output.writeFieldBegin('TrafficType', Thrift.Type.STRING, 48);
    output.writeString(this.TrafficType);
    output.writeFieldEnd();
  }
  if (this.OsVersion !== null && this.OsVersion !== undefined) {
    output.writeFieldBegin('OsVersion', Thrift.Type.STRING, 49);
    output.writeString(this.OsVersion);
    output.writeFieldEnd();
  }
  if (this.Uuid !== null && this.Uuid !== undefined) {
    output.writeFieldBegin('Uuid', Thrift.Type.STRING, 50);
    output.writeString(this.Uuid);
    output.writeFieldEnd();
  }
  if (this.Idfa !== null && this.Idfa !== undefined) {
    output.writeFieldBegin('Idfa', Thrift.Type.STRING, 51);
    output.writeString(this.Idfa);
    output.writeFieldEnd();
  }
  if (this.OpenUdid !== null && this.OpenUdid !== undefined) {
    output.writeFieldBegin('OpenUdid', Thrift.Type.STRING, 52);
    output.writeString(this.OpenUdid);
    output.writeFieldEnd();
  }
  if (this.AbParams !== null && this.AbParams !== undefined) {
    output.writeFieldBegin('AbParams', Thrift.Type.MAP, 53);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.AbParams));
    for (var kiter24 in this.AbParams)
    {
      if (this.AbParams.hasOwnProperty(kiter24))
      {
        var viter25 = this.AbParams[kiter24];
        output.writeString(kiter24);
        output.writeString(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.Attrs !== null && this.Attrs !== undefined) {
    output.writeFieldBegin('Attrs', Thrift.Type.MAP, 101);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.Attrs));
    for (var kiter26 in this.Attrs)
    {
      if (this.Attrs.hasOwnProperty(kiter26))
      {
        var viter27 = this.Attrs[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestInfoV2 = function(args) {
  this.LiveID = null;
  this.UserID = null;
  this.OdinUID = null;
  this.OdinUIDType = null;
  this.OdinUserIsAuth = null;
  this.UserRegisterTime = null;
  this.DeviceRegisterTime = null;
  this.FirstInstallTime = null;
  this.InstallID = null;
  this.ABParam = null;
  this.ABVersion = null;
  this.IP = null;
  this.Location = null;
  this.AccessCode = null;
  this.AppID = null;
  this.AppName = null;
  this.VersionCodeString = null;
  this.VersionCode = null;
  this.UpdateVersionCode = null;
  this.Channel = null;
  this.SysLanguage = null;
  this.SysRegion = null;
  this.Language = null;
  this.Region = null;
  this.projectSDKVersion = null;
  this.UserAgent = null;
  this.projectVersionCode = null;
  this.DeviceID = null;
  this.DevicePlatform = null;
  this.DeviceType = null;
  this.DeviceBrand = null;
  this.Resolution = null;
  this.OsVersion = null;
  this.UUID = null;
  this.IDFA = null;
  this.OpenUDID = null;
  this.DPI = null;
  this.SessionDeviceID = null;
  this.SessionAppID = null;
  this.XForwardedFor = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    }
    if (args.OdinUID !== undefined) {
      this.OdinUID = args.OdinUID;
    }
    if (args.OdinUIDType !== undefined) {
      this.OdinUIDType = args.OdinUIDType;
    }
    if (args.OdinUserIsAuth !== undefined) {
      this.OdinUserIsAuth = args.OdinUserIsAuth;
    }
    if (args.UserRegisterTime !== undefined) {
      this.UserRegisterTime = args.UserRegisterTime;
    }
    if (args.DeviceRegisterTime !== undefined) {
      this.DeviceRegisterTime = args.DeviceRegisterTime;
    }
    if (args.FirstInstallTime !== undefined) {
      this.FirstInstallTime = args.FirstInstallTime;
    }
    if (args.InstallID !== undefined) {
      this.InstallID = args.InstallID;
    }
    if (args.ABParam !== undefined) {
      this.ABParam = args.ABParam;
    }
    if (args.ABVersion !== undefined) {
      this.ABVersion = args.ABVersion;
    }
    if (args.IP !== undefined) {
      this.IP = args.IP;
    }
    if (args.Location !== undefined) {
      this.Location = args.Location;
    }
    if (args.AccessCode !== undefined) {
      this.AccessCode = args.AccessCode;
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    }
    if (args.AppName !== undefined) {
      this.AppName = args.AppName;
    }
    if (args.VersionCodeString !== undefined) {
      this.VersionCodeString = args.VersionCodeString;
    }
    if (args.VersionCode !== undefined) {
      this.VersionCode = args.VersionCode;
    }
    if (args.UpdateVersionCode !== undefined) {
      this.UpdateVersionCode = args.UpdateVersionCode;
    }
    if (args.Channel !== undefined) {
      this.Channel = args.Channel;
    }
    if (args.SysLanguage !== undefined) {
      this.SysLanguage = args.SysLanguage;
    }
    if (args.SysRegion !== undefined) {
      this.SysRegion = args.SysRegion;
    }
    if (args.Language !== undefined) {
      this.Language = args.Language;
    }
    if (args.Region !== undefined) {
      this.Region = args.Region;
    }
    if (args.projectSDKVersion !== undefined) {
      this.projectSDKVersion = args.projectSDKVersion;
    }
    if (args.UserAgent !== undefined) {
      this.UserAgent = args.UserAgent;
    }
    if (args.projectVersionCode !== undefined) {
      this.projectVersionCode = args.projectVersionCode;
    }
    if (args.DeviceID !== undefined) {
      this.DeviceID = args.DeviceID;
    }
    if (args.DevicePlatform !== undefined) {
      this.DevicePlatform = args.DevicePlatform;
    }
    if (args.DeviceType !== undefined) {
      this.DeviceType = args.DeviceType;
    }
    if (args.DeviceBrand !== undefined) {
      this.DeviceBrand = args.DeviceBrand;
    }
    if (args.Resolution !== undefined) {
      this.Resolution = args.Resolution;
    }
    if (args.OsVersion !== undefined) {
      this.OsVersion = args.OsVersion;
    }
    if (args.UUID !== undefined) {
      this.UUID = args.UUID;
    }
    if (args.IDFA !== undefined) {
      this.IDFA = args.IDFA;
    }
    if (args.OpenUDID !== undefined) {
      this.OpenUDID = args.OpenUDID;
    }
    if (args.DPI !== undefined) {
      this.DPI = args.DPI;
    }
    if (args.SessionDeviceID !== undefined) {
      this.SessionDeviceID = args.SessionDeviceID;
    }
    if (args.SessionAppID !== undefined) {
      this.SessionAppID = args.SessionAppID;
    }
    if (args.XForwardedFor !== undefined) {
      this.XForwardedFor = args.XForwardedFor;
    }
  }
};
RequestInfoV2.prototype = {};
RequestInfoV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.LiveID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.OdinUID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.OdinUIDType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.OdinUserIsAuth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.UserRegisterTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.DeviceRegisterTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.FirstInstallTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.InstallID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.ABParam = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.ABVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.IP = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.Location = new LocationV2();
        this.Location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I16) {
        this.AccessCode = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.I64) {
        this.AppID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRING) {
        this.AppName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.VersionCodeString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.I64) {
        this.VersionCode = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRING) {
        this.UpdateVersionCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRING) {
        this.Channel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRING) {
        this.SysLanguage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRING) {
        this.SysRegion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRING) {
        this.Language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRING) {
        this.Region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.I64) {
        this.projectSDKVersion = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRING) {
        this.UserAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.I64) {
        this.projectVersionCode = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.I64) {
        this.DeviceID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.STRING) {
        this.DevicePlatform = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 103:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 104:
      if (ftype == Thrift.Type.STRING) {
        this.DeviceBrand = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 105:
      if (ftype == Thrift.Type.STRING) {
        this.Resolution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 106:
      if (ftype == Thrift.Type.STRING) {
        this.OsVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 107:
      if (ftype == Thrift.Type.STRING) {
        this.UUID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 108:
      if (ftype == Thrift.Type.STRING) {
        this.IDFA = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 109:
      if (ftype == Thrift.Type.STRING) {
        this.OpenUDID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 110:
      if (ftype == Thrift.Type.I64) {
        this.DPI = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 150:
      if (ftype == Thrift.Type.I64) {
        this.SessionDeviceID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 151:
      if (ftype == Thrift.Type.I32) {
        this.SessionAppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 201:
      if (ftype == Thrift.Type.STRING) {
        this.XForwardedFor = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestInfoV2.prototype.write = function(output) {
  output.writeStructBegin('RequestInfoV2');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I64, 1);
    output.writeI64(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 11);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.OdinUID !== null && this.OdinUID !== undefined) {
    output.writeFieldBegin('OdinUID', Thrift.Type.I64, 12);
    output.writeI64(this.OdinUID);
    output.writeFieldEnd();
  }
  if (this.OdinUIDType !== null && this.OdinUIDType !== undefined) {
    output.writeFieldBegin('OdinUIDType', Thrift.Type.I32, 13);
    output.writeI32(this.OdinUIDType);
    output.writeFieldEnd();
  }
  if (this.OdinUserIsAuth !== null && this.OdinUserIsAuth !== undefined) {
    output.writeFieldBegin('OdinUserIsAuth', Thrift.Type.I32, 14);
    output.writeI32(this.OdinUserIsAuth);
    output.writeFieldEnd();
  }
  if (this.UserRegisterTime !== null && this.UserRegisterTime !== undefined) {
    output.writeFieldBegin('UserRegisterTime', Thrift.Type.I64, 15);
    output.writeI64(this.UserRegisterTime);
    output.writeFieldEnd();
  }
  if (this.DeviceRegisterTime !== null && this.DeviceRegisterTime !== undefined) {
    output.writeFieldBegin('DeviceRegisterTime', Thrift.Type.I64, 16);
    output.writeI64(this.DeviceRegisterTime);
    output.writeFieldEnd();
  }
  if (this.FirstInstallTime !== null && this.FirstInstallTime !== undefined) {
    output.writeFieldBegin('FirstInstallTime', Thrift.Type.I64, 17);
    output.writeI64(this.FirstInstallTime);
    output.writeFieldEnd();
  }
  if (this.InstallID !== null && this.InstallID !== undefined) {
    output.writeFieldBegin('InstallID', Thrift.Type.I64, 18);
    output.writeI64(this.InstallID);
    output.writeFieldEnd();
  }
  if (this.ABParam !== null && this.ABParam !== undefined) {
    output.writeFieldBegin('ABParam', Thrift.Type.STRING, 19);
    output.writeString(this.ABParam);
    output.writeFieldEnd();
  }
  if (this.ABVersion !== null && this.ABVersion !== undefined) {
    output.writeFieldBegin('ABVersion', Thrift.Type.STRING, 20);
    output.writeString(this.ABVersion);
    output.writeFieldEnd();
  }
  if (this.IP !== null && this.IP !== undefined) {
    output.writeFieldBegin('IP', Thrift.Type.STRING, 21);
    output.writeString(this.IP);
    output.writeFieldEnd();
  }
  if (this.Location !== null && this.Location !== undefined) {
    output.writeFieldBegin('Location', Thrift.Type.STRUCT, 22);
    this.Location.write(output);
    output.writeFieldEnd();
  }
  if (this.AccessCode !== null && this.AccessCode !== undefined) {
    output.writeFieldBegin('AccessCode', Thrift.Type.I16, 23);
    output.writeI16(this.AccessCode);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I64, 51);
    output.writeI64(this.AppID);
    output.writeFieldEnd();
  }
  if (this.AppName !== null && this.AppName !== undefined) {
    output.writeFieldBegin('AppName', Thrift.Type.STRING, 52);
    output.writeString(this.AppName);
    output.writeFieldEnd();
  }
  if (this.VersionCodeString !== null && this.VersionCodeString !== undefined) {
    output.writeFieldBegin('VersionCodeString', Thrift.Type.STRING, 53);
    output.writeString(this.VersionCodeString);
    output.writeFieldEnd();
  }
  if (this.VersionCode !== null && this.VersionCode !== undefined) {
    output.writeFieldBegin('VersionCode', Thrift.Type.I64, 54);
    output.writeI64(this.VersionCode);
    output.writeFieldEnd();
  }
  if (this.UpdateVersionCode !== null && this.UpdateVersionCode !== undefined) {
    output.writeFieldBegin('UpdateVersionCode', Thrift.Type.STRING, 55);
    output.writeString(this.UpdateVersionCode);
    output.writeFieldEnd();
  }
  if (this.Channel !== null && this.Channel !== undefined) {
    output.writeFieldBegin('Channel', Thrift.Type.STRING, 56);
    output.writeString(this.Channel);
    output.writeFieldEnd();
  }
  if (this.SysLanguage !== null && this.SysLanguage !== undefined) {
    output.writeFieldBegin('SysLanguage', Thrift.Type.STRING, 57);
    output.writeString(this.SysLanguage);
    output.writeFieldEnd();
  }
  if (this.SysRegion !== null && this.SysRegion !== undefined) {
    output.writeFieldBegin('SysRegion', Thrift.Type.STRING, 58);
    output.writeString(this.SysRegion);
    output.writeFieldEnd();
  }
  if (this.Language !== null && this.Language !== undefined) {
    output.writeFieldBegin('Language', Thrift.Type.STRING, 59);
    output.writeString(this.Language);
    output.writeFieldEnd();
  }
  if (this.Region !== null && this.Region !== undefined) {
    output.writeFieldBegin('Region', Thrift.Type.STRING, 60);
    output.writeString(this.Region);
    output.writeFieldEnd();
  }
  if (this.projectSDKVersion !== null && this.projectSDKVersion !== undefined) {
    output.writeFieldBegin('projectSDKVersion', Thrift.Type.I64, 61);
    output.writeI64(this.projectSDKVersion);
    output.writeFieldEnd();
  }
  if (this.UserAgent !== null && this.UserAgent !== undefined) {
    output.writeFieldBegin('UserAgent', Thrift.Type.STRING, 62);
    output.writeString(this.UserAgent);
    output.writeFieldEnd();
  }
  if (this.projectVersionCode !== null && this.projectVersionCode !== undefined) {
    output.writeFieldBegin('projectVersionCode', Thrift.Type.I64, 63);
    output.writeI64(this.projectVersionCode);
    output.writeFieldEnd();
  }
  if (this.DeviceID !== null && this.DeviceID !== undefined) {
    output.writeFieldBegin('DeviceID', Thrift.Type.I64, 101);
    output.writeI64(this.DeviceID);
    output.writeFieldEnd();
  }
  if (this.DevicePlatform !== null && this.DevicePlatform !== undefined) {
    output.writeFieldBegin('DevicePlatform', Thrift.Type.STRING, 102);
    output.writeString(this.DevicePlatform);
    output.writeFieldEnd();
  }
  if (this.DeviceType !== null && this.DeviceType !== undefined) {
    output.writeFieldBegin('DeviceType', Thrift.Type.STRING, 103);
    output.writeString(this.DeviceType);
    output.writeFieldEnd();
  }
  if (this.DeviceBrand !== null && this.DeviceBrand !== undefined) {
    output.writeFieldBegin('DeviceBrand', Thrift.Type.STRING, 104);
    output.writeString(this.DeviceBrand);
    output.writeFieldEnd();
  }
  if (this.Resolution !== null && this.Resolution !== undefined) {
    output.writeFieldBegin('Resolution', Thrift.Type.STRING, 105);
    output.writeString(this.Resolution);
    output.writeFieldEnd();
  }
  if (this.OsVersion !== null && this.OsVersion !== undefined) {
    output.writeFieldBegin('OsVersion', Thrift.Type.STRING, 106);
    output.writeString(this.OsVersion);
    output.writeFieldEnd();
  }
  if (this.UUID !== null && this.UUID !== undefined) {
    output.writeFieldBegin('UUID', Thrift.Type.STRING, 107);
    output.writeString(this.UUID);
    output.writeFieldEnd();
  }
  if (this.IDFA !== null && this.IDFA !== undefined) {
    output.writeFieldBegin('IDFA', Thrift.Type.STRING, 108);
    output.writeString(this.IDFA);
    output.writeFieldEnd();
  }
  if (this.OpenUDID !== null && this.OpenUDID !== undefined) {
    output.writeFieldBegin('OpenUDID', Thrift.Type.STRING, 109);
    output.writeString(this.OpenUDID);
    output.writeFieldEnd();
  }
  if (this.DPI !== null && this.DPI !== undefined) {
    output.writeFieldBegin('DPI', Thrift.Type.I64, 110);
    output.writeI64(this.DPI);
    output.writeFieldEnd();
  }
  if (this.SessionDeviceID !== null && this.SessionDeviceID !== undefined) {
    output.writeFieldBegin('SessionDeviceID', Thrift.Type.I64, 150);
    output.writeI64(this.SessionDeviceID);
    output.writeFieldEnd();
  }
  if (this.SessionAppID !== null && this.SessionAppID !== undefined) {
    output.writeFieldBegin('SessionAppID', Thrift.Type.I32, 151);
    output.writeI32(this.SessionAppID);
    output.writeFieldEnd();
  }
  if (this.XForwardedFor !== null && this.XForwardedFor !== undefined) {
    output.writeFieldBegin('XForwardedFor', Thrift.Type.STRING, 201);
    output.writeString(this.XForwardedFor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

