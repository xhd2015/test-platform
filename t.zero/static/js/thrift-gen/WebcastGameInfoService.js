//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

WebcastGameInfoService_MLoginGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MLoginGame_args.prototype = {};
WebcastGameInfoService_MLoginGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MLoginGameReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MLoginGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MLoginGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MLoginGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MLoginGame_result.prototype = {};
WebcastGameInfoService_MLoginGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MLoginGameResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MLoginGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MLoginGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MLogoutGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MLogoutGame_args.prototype = {};
WebcastGameInfoService_MLogoutGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MLogoutGameReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MLogoutGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MLogoutGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MLogoutGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MLogoutGame_result.prototype = {};
WebcastGameInfoService_MLogoutGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MLogoutGameResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MLogoutGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MLogoutGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MIsGameOnline_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MIsGameOnline_args.prototype = {};
WebcastGameInfoService_MIsGameOnline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MIsGameOnlineReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MIsGameOnline_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MIsGameOnline_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MIsGameOnline_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MIsGameOnline_result.prototype = {};
WebcastGameInfoService_MIsGameOnline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MIsGameOnlineResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MIsGameOnline_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MIsGameOnline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_PermissionAuthorize_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_PermissionAuthorize_args.prototype = {};
WebcastGameInfoService_PermissionAuthorize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new PermissionAuthorizeReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_PermissionAuthorize_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_PermissionAuthorize_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_PermissionAuthorize_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_PermissionAuthorize_result.prototype = {};
WebcastGameInfoService_PermissionAuthorize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PermissionAuthorizeResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_PermissionAuthorize_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_PermissionAuthorize_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MPermissionCheck_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MPermissionCheck_args.prototype = {};
WebcastGameInfoService_MPermissionCheck_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MPermissionCheckReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MPermissionCheck_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MPermissionCheck_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MPermissionCheck_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MPermissionCheck_result.prototype = {};
WebcastGameInfoService_MPermissionCheck_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MPermissionCheckResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MPermissionCheck_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MPermissionCheck_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_ClientConfigExtra_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_ClientConfigExtra_args.prototype = {};
WebcastGameInfoService_ClientConfigExtra_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new ClientConfigExtraReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_ClientConfigExtra_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_ClientConfigExtra_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_ClientConfigExtra_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_ClientConfigExtra_result.prototype = {};
WebcastGameInfoService_ClientConfigExtra_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ClientConfigExtraResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_ClientConfigExtra_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_ClientConfigExtra_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetDanceMusicList_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_GetDanceMusicList_args.prototype = {};
WebcastGameInfoService_GetDanceMusicList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new GetDanceMusicListRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetDanceMusicList_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetDanceMusicList_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetDanceMusicList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_GetDanceMusicList_result.prototype = {};
WebcastGameInfoService_GetDanceMusicList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetDanceMusicListResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetDanceMusicList_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetDanceMusicList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_StartEffectGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_StartEffectGame_args.prototype = {};
WebcastGameInfoService_StartEffectGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new StartEffectGameRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_StartEffectGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_StartEffectGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_StartEffectGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_StartEffectGame_result.prototype = {};
WebcastGameInfoService_StartEffectGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StartEffectGameResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_StartEffectGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_StartEffectGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_FinishEffectGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_FinishEffectGame_args.prototype = {};
WebcastGameInfoService_FinishEffectGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new FinishEffectGameRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_FinishEffectGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_FinishEffectGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_FinishEffectGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_FinishEffectGame_result.prototype = {};
WebcastGameInfoService_FinishEffectGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FinishEffectGameResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_FinishEffectGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_FinishEffectGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_SetRewardInfo_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_SetRewardInfo_args.prototype = {};
WebcastGameInfoService_SetRewardInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new SetRewardInfoRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_SetRewardInfo_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_SetRewardInfo_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_SetRewardInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_SetRewardInfo_result.prototype = {};
WebcastGameInfoService_SetRewardInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SetRewardInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_SetRewardInfo_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_SetRewardInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetRewardInfo_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_GetRewardInfo_args.prototype = {};
WebcastGameInfoService_GetRewardInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new GetRewardInfoRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetRewardInfo_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetRewardInfo_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetRewardInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_GetRewardInfo_result.prototype = {};
WebcastGameInfoService_GetRewardInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetRewardInfoResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetRewardInfo_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetRewardInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_StartGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_StartGame_args.prototype = {};
WebcastGameInfoService_StartGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new StartGameReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_StartGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_StartGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_StartGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_StartGame_result.prototype = {};
WebcastGameInfoService_StartGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new StartGameResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_StartGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_StartGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_FinishGame_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_FinishGame_args.prototype = {};
WebcastGameInfoService_FinishGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new FinishGameReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_FinishGame_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_FinishGame_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_FinishGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_FinishGame_result.prototype = {};
WebcastGameInfoService_FinishGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FinishGameResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_FinishGame_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_FinishGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetGameResource_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_GetGameResource_args.prototype = {};
WebcastGameInfoService_GetGameResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new GetGameResourceReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetGameResource_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetGameResource_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetGameResource_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_GetGameResource_result.prototype = {};
WebcastGameInfoService_GetGameResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetGameResourceResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetGameResource_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetGameResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MAddReward_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MAddReward_args.prototype = {};
WebcastGameInfoService_MAddReward_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MAddRewardReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MAddReward_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MAddReward_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MAddReward_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MAddReward_result.prototype = {};
WebcastGameInfoService_MAddReward_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MAddRewardResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MAddReward_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MAddReward_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MDeleteReward_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MDeleteReward_args.prototype = {};
WebcastGameInfoService_MDeleteReward_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MDeleteRewardReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MDeleteReward_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MDeleteReward_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MDeleteReward_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MDeleteReward_result.prototype = {};
WebcastGameInfoService_MDeleteReward_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MDeleteRewardResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MDeleteReward_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MDeleteReward_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MUpdateReward_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MUpdateReward_args.prototype = {};
WebcastGameInfoService_MUpdateReward_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MUpdateRewardReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MUpdateReward_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MUpdateReward_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MUpdateReward_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MUpdateReward_result.prototype = {};
WebcastGameInfoService_MUpdateReward_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MUpdateRewardResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MUpdateReward_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MUpdateReward_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetReward_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_GetReward_args.prototype = {};
WebcastGameInfoService_GetReward_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new GetRewardReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetReward_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetReward_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_GetReward_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_GetReward_result.prototype = {};
WebcastGameInfoService_GetReward_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetRewardResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_GetReward_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_GetReward_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MGetPlaySwitch_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MGetPlaySwitch_args.prototype = {};
WebcastGameInfoService_MGetPlaySwitch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MGetPlaySwitchReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MGetPlaySwitch_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MGetPlaySwitch_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MGetPlaySwitch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MGetPlaySwitch_result.prototype = {};
WebcastGameInfoService_MGetPlaySwitch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MGetPlaySwitchResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MGetPlaySwitch_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MGetPlaySwitch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MUpdatePlaySwitch_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined) {
      this.req = args.req;
    }
  }
};
WebcastGameInfoService_MUpdatePlaySwitch_args.prototype = {};
WebcastGameInfoService_MUpdatePlaySwitch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new MUpdatePlaySwitchReq();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MUpdatePlaySwitch_args.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MUpdatePlaySwitch_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoService_MUpdatePlaySwitch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
WebcastGameInfoService_MUpdatePlaySwitch_result.prototype = {};
WebcastGameInfoService_MUpdatePlaySwitch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MUpdatePlaySwitchResp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebcastGameInfoService_MUpdatePlaySwitch_result.prototype.write = function(output) {
  output.writeStructBegin('WebcastGameInfoService_MUpdatePlaySwitch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WebcastGameInfoServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
WebcastGameInfoServiceClient.prototype = {};
WebcastGameInfoServiceClient.prototype.MLoginGame = function(req, callback) {
  this.send_MLoginGame(req, callback); 
  if (!callback) {
    return this.recv_MLoginGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_MLoginGame = function(req, callback) {
  this.output.writeMessageBegin('MLoginGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MLoginGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MLoginGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MLoginGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MLoginGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MLoginGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MLogoutGame = function(req, callback) {
  this.send_MLogoutGame(req, callback); 
  if (!callback) {
    return this.recv_MLogoutGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_MLogoutGame = function(req, callback) {
  this.output.writeMessageBegin('MLogoutGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MLogoutGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MLogoutGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MLogoutGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MLogoutGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MLogoutGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MIsGameOnline = function(req, callback) {
  this.send_MIsGameOnline(req, callback); 
  if (!callback) {
    return this.recv_MIsGameOnline();
  }
};

WebcastGameInfoServiceClient.prototype.send_MIsGameOnline = function(req, callback) {
  this.output.writeMessageBegin('MIsGameOnline', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MIsGameOnline_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MIsGameOnline();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MIsGameOnline = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MIsGameOnline_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MIsGameOnline failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.PermissionAuthorize = function(req, callback) {
  this.send_PermissionAuthorize(req, callback); 
  if (!callback) {
    return this.recv_PermissionAuthorize();
  }
};

WebcastGameInfoServiceClient.prototype.send_PermissionAuthorize = function(req, callback) {
  this.output.writeMessageBegin('PermissionAuthorize', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_PermissionAuthorize_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_PermissionAuthorize();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_PermissionAuthorize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_PermissionAuthorize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'PermissionAuthorize failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MPermissionCheck = function(req, callback) {
  this.send_MPermissionCheck(req, callback); 
  if (!callback) {
    return this.recv_MPermissionCheck();
  }
};

WebcastGameInfoServiceClient.prototype.send_MPermissionCheck = function(req, callback) {
  this.output.writeMessageBegin('MPermissionCheck', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MPermissionCheck_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MPermissionCheck();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MPermissionCheck = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MPermissionCheck_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MPermissionCheck failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.ClientConfigExtra = function(req, callback) {
  this.send_ClientConfigExtra(req, callback); 
  if (!callback) {
    return this.recv_ClientConfigExtra();
  }
};

WebcastGameInfoServiceClient.prototype.send_ClientConfigExtra = function(req, callback) {
  this.output.writeMessageBegin('ClientConfigExtra', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_ClientConfigExtra_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ClientConfigExtra();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_ClientConfigExtra = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_ClientConfigExtra_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ClientConfigExtra failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.GetDanceMusicList = function(req, callback) {
  this.send_GetDanceMusicList(req, callback); 
  if (!callback) {
    return this.recv_GetDanceMusicList();
  }
};

WebcastGameInfoServiceClient.prototype.send_GetDanceMusicList = function(req, callback) {
  this.output.writeMessageBegin('GetDanceMusicList', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_GetDanceMusicList_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_GetDanceMusicList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_GetDanceMusicList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_GetDanceMusicList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetDanceMusicList failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.StartEffectGame = function(req, callback) {
  this.send_StartEffectGame(req, callback); 
  if (!callback) {
    return this.recv_StartEffectGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_StartEffectGame = function(req, callback) {
  this.output.writeMessageBegin('StartEffectGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_StartEffectGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_StartEffectGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_StartEffectGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_StartEffectGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'StartEffectGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.FinishEffectGame = function(req, callback) {
  this.send_FinishEffectGame(req, callback); 
  if (!callback) {
    return this.recv_FinishEffectGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_FinishEffectGame = function(req, callback) {
  this.output.writeMessageBegin('FinishEffectGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_FinishEffectGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_FinishEffectGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_FinishEffectGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_FinishEffectGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'FinishEffectGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.SetRewardInfo = function(req, callback) {
  this.send_SetRewardInfo(req, callback); 
  if (!callback) {
    return this.recv_SetRewardInfo();
  }
};

WebcastGameInfoServiceClient.prototype.send_SetRewardInfo = function(req, callback) {
  this.output.writeMessageBegin('SetRewardInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_SetRewardInfo_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_SetRewardInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_SetRewardInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_SetRewardInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SetRewardInfo failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.GetRewardInfo = function(req, callback) {
  this.send_GetRewardInfo(req, callback); 
  if (!callback) {
    return this.recv_GetRewardInfo();
  }
};

WebcastGameInfoServiceClient.prototype.send_GetRewardInfo = function(req, callback) {
  this.output.writeMessageBegin('GetRewardInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_GetRewardInfo_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_GetRewardInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_GetRewardInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_GetRewardInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRewardInfo failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.StartGame = function(req, callback) {
  this.send_StartGame(req, callback); 
  if (!callback) {
    return this.recv_StartGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_StartGame = function(req, callback) {
  this.output.writeMessageBegin('StartGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_StartGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_StartGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_StartGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_StartGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'StartGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.FinishGame = function(req, callback) {
  this.send_FinishGame(req, callback); 
  if (!callback) {
    return this.recv_FinishGame();
  }
};

WebcastGameInfoServiceClient.prototype.send_FinishGame = function(req, callback) {
  this.output.writeMessageBegin('FinishGame', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_FinishGame_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_FinishGame();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_FinishGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_FinishGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'FinishGame failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.GetGameResource = function(req, callback) {
  this.send_GetGameResource(req, callback); 
  if (!callback) {
    return this.recv_GetGameResource();
  }
};

WebcastGameInfoServiceClient.prototype.send_GetGameResource = function(req, callback) {
  this.output.writeMessageBegin('GetGameResource', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_GetGameResource_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_GetGameResource();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_GetGameResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_GetGameResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetGameResource failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MAddReward = function(req, callback) {
  this.send_MAddReward(req, callback); 
  if (!callback) {
    return this.recv_MAddReward();
  }
};

WebcastGameInfoServiceClient.prototype.send_MAddReward = function(req, callback) {
  this.output.writeMessageBegin('MAddReward', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MAddReward_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MAddReward();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MAddReward = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MAddReward_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MAddReward failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MDeleteReward = function(req, callback) {
  this.send_MDeleteReward(req, callback); 
  if (!callback) {
    return this.recv_MDeleteReward();
  }
};

WebcastGameInfoServiceClient.prototype.send_MDeleteReward = function(req, callback) {
  this.output.writeMessageBegin('MDeleteReward', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MDeleteReward_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MDeleteReward();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MDeleteReward = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MDeleteReward_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MDeleteReward failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MUpdateReward = function(req, callback) {
  this.send_MUpdateReward(req, callback); 
  if (!callback) {
    return this.recv_MUpdateReward();
  }
};

WebcastGameInfoServiceClient.prototype.send_MUpdateReward = function(req, callback) {
  this.output.writeMessageBegin('MUpdateReward', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MUpdateReward_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MUpdateReward();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MUpdateReward = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MUpdateReward_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MUpdateReward failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.GetReward = function(req, callback) {
  this.send_GetReward(req, callback); 
  if (!callback) {
    return this.recv_GetReward();
  }
};

WebcastGameInfoServiceClient.prototype.send_GetReward = function(req, callback) {
  this.output.writeMessageBegin('GetReward', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_GetReward_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_GetReward();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_GetReward = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_GetReward_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'GetReward failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MGetPlaySwitch = function(req, callback) {
  this.send_MGetPlaySwitch(req, callback); 
  if (!callback) {
    return this.recv_MGetPlaySwitch();
  }
};

WebcastGameInfoServiceClient.prototype.send_MGetPlaySwitch = function(req, callback) {
  this.output.writeMessageBegin('MGetPlaySwitch', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MGetPlaySwitch_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MGetPlaySwitch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MGetPlaySwitch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MGetPlaySwitch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MGetPlaySwitch failed: unknown result';
};
WebcastGameInfoServiceClient.prototype.MUpdatePlaySwitch = function(req, callback) {
  this.send_MUpdatePlaySwitch(req, callback); 
  if (!callback) {
    return this.recv_MUpdatePlaySwitch();
  }
};

WebcastGameInfoServiceClient.prototype.send_MUpdatePlaySwitch = function(req, callback) {
  this.output.writeMessageBegin('MUpdatePlaySwitch', Thrift.MessageType.CALL, this.seqid);
  var args = new WebcastGameInfoService_MUpdatePlaySwitch_args();
  args.req = req;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_MUpdatePlaySwitch();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

WebcastGameInfoServiceClient.prototype.recv_MUpdatePlaySwitch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WebcastGameInfoService_MUpdatePlaySwitch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'MUpdatePlaySwitch failed: unknown result';
};
