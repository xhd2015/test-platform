//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TrafficEnv = function(args) {
  this.Open = false;
  this.Env = '';
  if (args) {
    if (args.Open !== undefined) {
      this.Open = args.Open;
    }
    if (args.Env !== undefined) {
      this.Env = args.Env;
    }
  }
};
TrafficEnv.prototype = {};
TrafficEnv.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.Open = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Env = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TrafficEnv.prototype.write = function(output) {
  output.writeStructBegin('TrafficEnv');
  if (this.Open !== null && this.Open !== undefined) {
    output.writeFieldBegin('Open', Thrift.Type.BOOL, 1);
    output.writeBool(this.Open);
    output.writeFieldEnd();
  }
  if (this.Env !== null && this.Env !== undefined) {
    output.writeFieldBegin('Env', Thrift.Type.STRING, 2);
    output.writeString(this.Env);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Base = function(args) {
  this.LogID = '';
  this.Caller = '';
  this.Addr = '';
  this.Client = '';
  this.TrafficEnv = null;
  this.Extra = null;
  if (args) {
    if (args.LogID !== undefined) {
      this.LogID = args.LogID;
    }
    if (args.Caller !== undefined) {
      this.Caller = args.Caller;
    }
    if (args.Addr !== undefined) {
      this.Addr = args.Addr;
    }
    if (args.Client !== undefined) {
      this.Client = args.Client;
    }
    if (args.TrafficEnv !== undefined) {
      this.TrafficEnv = args.TrafficEnv;
    }
    if (args.Extra !== undefined) {
      this.Extra = args.Extra;
    }
  }
};
Base.prototype = {};
Base.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.LogID = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Caller = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Addr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Client = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.TrafficEnv = new TrafficEnv();
        this.TrafficEnv.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.Extra = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.Extra[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Base.prototype.write = function(output) {
  output.writeStructBegin('Base');
  if (this.LogID !== null && this.LogID !== undefined) {
    output.writeFieldBegin('LogID', Thrift.Type.STRING, 1);
    output.writeString(this.LogID);
    output.writeFieldEnd();
  }
  if (this.Caller !== null && this.Caller !== undefined) {
    output.writeFieldBegin('Caller', Thrift.Type.STRING, 2);
    output.writeString(this.Caller);
    output.writeFieldEnd();
  }
  if (this.Addr !== null && this.Addr !== undefined) {
    output.writeFieldBegin('Addr', Thrift.Type.STRING, 3);
    output.writeString(this.Addr);
    output.writeFieldEnd();
  }
  if (this.Client !== null && this.Client !== undefined) {
    output.writeFieldBegin('Client', Thrift.Type.STRING, 4);
    output.writeString(this.Client);
    output.writeFieldEnd();
  }
  if (this.TrafficEnv !== null && this.TrafficEnv !== undefined) {
    output.writeFieldBegin('TrafficEnv', Thrift.Type.STRUCT, 5);
    this.TrafficEnv.write(output);
    output.writeFieldEnd();
  }
  if (this.Extra !== null && this.Extra !== undefined) {
    output.writeFieldBegin('Extra', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.Extra));
    for (var kiter8 in this.Extra)
    {
      if (this.Extra.hasOwnProperty(kiter8))
      {
        var viter9 = this.Extra[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BaseResp = function(args) {
  this.StatusMessage = '';
  this.StatusCode = 0;
  this.Extra = null;
  if (args) {
    if (args.StatusMessage !== undefined) {
      this.StatusMessage = args.StatusMessage;
    }
    if (args.StatusCode !== undefined) {
      this.StatusCode = args.StatusCode;
    }
    if (args.Extra !== undefined) {
      this.Extra = args.Extra;
    }
  }
};
BaseResp.prototype = {};
BaseResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.StatusMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.StatusCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.Extra = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          if (_i15 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key16 = null;
          var val17 = null;
          key16 = input.readString().value;
          val17 = input.readString().value;
          this.Extra[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BaseResp.prototype.write = function(output) {
  output.writeStructBegin('BaseResp');
  if (this.StatusMessage !== null && this.StatusMessage !== undefined) {
    output.writeFieldBegin('StatusMessage', Thrift.Type.STRING, 1);
    output.writeString(this.StatusMessage);
    output.writeFieldEnd();
  }
  if (this.StatusCode !== null && this.StatusCode !== undefined) {
    output.writeFieldBegin('StatusCode', Thrift.Type.I32, 2);
    output.writeI32(this.StatusCode);
    output.writeFieldEnd();
  }
  if (this.Extra !== null && this.Extra !== undefined) {
    output.writeFieldBegin('Extra', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.Extra));
    for (var kiter18 in this.Extra)
    {
      if (this.Extra.hasOwnProperty(kiter18))
      {
        var viter19 = this.Extra[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

