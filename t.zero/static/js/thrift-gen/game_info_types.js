//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AuthKindEnum = {
  'PresentNickname' : 1
};
LoginItem = function(args) {
  this.SwitchID = null;
  this.UserID = null;
  if (args) {
    if (args.SwitchID !== undefined) {
      this.SwitchID = args.SwitchID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SwitchID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
  }
};
LoginItem.prototype = {};
LoginItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.SwitchID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginItem.prototype.write = function(output) {
  output.writeStructBegin('LoginItem');
  if (this.SwitchID !== null && this.SwitchID !== undefined) {
    output.writeFieldBegin('SwitchID', Thrift.Type.I64, 1);
    output.writeI64(this.SwitchID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 2);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MLoginGameReq = function(args) {
  this.GameID = null;
  this.AppID = null;
  this.LoginItems = null;
  this.Base = null;
  if (args) {
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.LoginItems !== undefined) {
      this.LoginItems = args.LoginItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LoginItems is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
MLoginGameReq.prototype = {};
MLoginGameReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.LoginItems = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new LoginItem();
          elem6.read(input);
          this.LoginItems.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MLoginGameReq.prototype.write = function(output) {
  output.writeStructBegin('MLoginGameReq');
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 1);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.LoginItems !== null && this.LoginItems !== undefined) {
    output.writeFieldBegin('LoginItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.LoginItems.length);
    for (var iter7 in this.LoginItems)
    {
      if (this.LoginItems.hasOwnProperty(iter7))
      {
        iter7 = this.LoginItems[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MLoginGameResp = function(args) {
  this.UserToResp = null;
  this.BaseResp = null;
  if (args) {
    if (args.UserToResp !== undefined) {
      this.UserToResp = args.UserToResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserToResp is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
MLoginGameResp.prototype = {};
MLoginGameResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.UserToResp = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readI64().value;
          val15 = input.readString().value;
          this.UserToResp[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MLoginGameResp.prototype.write = function(output) {
  output.writeStructBegin('MLoginGameResp');
  if (this.UserToResp !== null && this.UserToResp !== undefined) {
    output.writeFieldBegin('UserToResp', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.UserToResp));
    for (var kiter16 in this.UserToResp)
    {
      if (this.UserToResp.hasOwnProperty(kiter16))
      {
        var viter17 = this.UserToResp[kiter16];
        output.writeI64(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogoutItem = function(args) {
  this.SwitchID = null;
  this.UserID = null;
  if (args) {
    if (args.SwitchID !== undefined) {
      this.SwitchID = args.SwitchID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SwitchID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
  }
};
LogoutItem.prototype = {};
LogoutItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.SwitchID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogoutItem.prototype.write = function(output) {
  output.writeStructBegin('LogoutItem');
  if (this.SwitchID !== null && this.SwitchID !== undefined) {
    output.writeFieldBegin('SwitchID', Thrift.Type.I64, 1);
    output.writeI64(this.SwitchID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 2);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MLogoutGameReq = function(args) {
  this.GameID = null;
  this.AppID = null;
  this.LogoutItems = null;
  this.Base = null;
  if (args) {
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.LogoutItems !== undefined) {
      this.LogoutItems = args.LogoutItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LogoutItems is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
MLogoutGameReq.prototype = {};
MLogoutGameReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.LogoutItems = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new LogoutItem();
          elem24.read(input);
          this.LogoutItems.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MLogoutGameReq.prototype.write = function(output) {
  output.writeStructBegin('MLogoutGameReq');
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 1);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.LogoutItems !== null && this.LogoutItems !== undefined) {
    output.writeFieldBegin('LogoutItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.LogoutItems.length);
    for (var iter25 in this.LogoutItems)
    {
      if (this.LogoutItems.hasOwnProperty(iter25))
      {
        iter25 = this.LogoutItems[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MLogoutGameResp = function(args) {
  this.UserToResp = null;
  this.BaseResp = null;
  if (args) {
    if (args.UserToResp !== undefined) {
      this.UserToResp = args.UserToResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserToResp is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
MLogoutGameResp.prototype = {};
MLogoutGameResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.UserToResp = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          if (_i31 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key32 = null;
          var val33 = null;
          key32 = input.readI64().value;
          val33 = input.readString().value;
          this.UserToResp[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MLogoutGameResp.prototype.write = function(output) {
  output.writeStructBegin('MLogoutGameResp');
  if (this.UserToResp !== null && this.UserToResp !== undefined) {
    output.writeFieldBegin('UserToResp', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.UserToResp));
    for (var kiter34 in this.UserToResp)
    {
      if (this.UserToResp.hasOwnProperty(kiter34))
      {
        var viter35 = this.UserToResp[kiter34];
        output.writeI64(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MIsGameOnlineReq = function(args) {
  this.GameID = null;
  this.AppID = null;
  this.UserList = null;
  this.Base = null;
  if (args) {
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserList !== undefined) {
      this.UserList = args.UserList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserList is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
MIsGameOnlineReq.prototype = {};
MIsGameOnlineReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.UserList = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readI64().value;
          this.UserList.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MIsGameOnlineReq.prototype.write = function(output) {
  output.writeStructBegin('MIsGameOnlineReq');
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 1);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserList !== null && this.UserList !== undefined) {
    output.writeFieldBegin('UserList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.UserList.length);
    for (var iter43 in this.UserList)
    {
      if (this.UserList.hasOwnProperty(iter43))
      {
        iter43 = this.UserList[iter43];
        output.writeI64(iter43);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MIsGameOnlineResp = function(args) {
  this.UserToOnline = null;
  this.BaseResp = null;
  if (args) {
    if (args.UserToOnline !== undefined) {
      this.UserToOnline = args.UserToOnline;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserToOnline is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
MIsGameOnlineResp.prototype = {};
MIsGameOnlineResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size44 = 0;
        var _rtmp348;
        this.UserToOnline = {};
        var _ktype45 = 0;
        var _vtype46 = 0;
        _rtmp348 = input.readMapBegin();
        _ktype45 = _rtmp348.ktype;
        _vtype46 = _rtmp348.vtype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          if (_i49 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key50 = null;
          var val51 = null;
          key50 = input.readI64().value;
          val51 = input.readBool().value;
          this.UserToOnline[key50] = val51;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MIsGameOnlineResp.prototype.write = function(output) {
  output.writeStructBegin('MIsGameOnlineResp');
  if (this.UserToOnline !== null && this.UserToOnline !== undefined) {
    output.writeFieldBegin('UserToOnline', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.UserToOnline));
    for (var kiter52 in this.UserToOnline)
    {
      if (this.UserToOnline.hasOwnProperty(kiter52))
      {
        var viter53 = this.UserToOnline[kiter52];
        output.writeI64(kiter52);
        output.writeBool(viter53);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PermissionAuthorizeReq = function(args) {
  this.UserID = null;
  this.AppID = null;
  this.AuthKind = null;
  this.GameID = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.AuthKind !== undefined) {
      this.AuthKind = args.AuthKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AuthKind is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
PermissionAuthorizeReq.prototype = {};
PermissionAuthorizeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AuthKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PermissionAuthorizeReq.prototype.write = function(output) {
  output.writeStructBegin('PermissionAuthorizeReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.AuthKind !== null && this.AuthKind !== undefined) {
    output.writeFieldBegin('AuthKind', Thrift.Type.I32, 3);
    output.writeI32(this.AuthKind);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PermissionAuthorizeResp = function(args) {
  this.BaseResp = null;
  if (args) {
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
PermissionAuthorizeResp.prototype = {};
PermissionAuthorizeResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PermissionAuthorizeResp.prototype.write = function(output) {
  output.writeStructBegin('PermissionAuthorizeResp');
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MPermissionCheckReq = function(args) {
  this.UserID = null;
  this.AppID = null;
  this.GameID = null;
  this.AuthKindList = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.AuthKindList !== undefined) {
      this.AuthKindList = args.AuthKindList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AuthKindList is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
MPermissionCheckReq.prototype = {};
MPermissionCheckReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.AuthKindList = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = input.readI32().value;
          this.AuthKindList.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MPermissionCheckReq.prototype.write = function(output) {
  output.writeStructBegin('MPermissionCheckReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 3);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.AuthKindList !== null && this.AuthKindList !== undefined) {
    output.writeFieldBegin('AuthKindList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.AuthKindList.length);
    for (var iter61 in this.AuthKindList)
    {
      if (this.AuthKindList.hasOwnProperty(iter61))
      {
        iter61 = this.AuthKindList[iter61];
        output.writeI32(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MPermissionCheckResp = function(args) {
  this.AuthKindToStatus = null;
  this.BaseResp = null;
  if (args) {
    if (args.AuthKindToStatus !== undefined) {
      this.AuthKindToStatus = args.AuthKindToStatus;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AuthKindToStatus is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
MPermissionCheckResp.prototype = {};
MPermissionCheckResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size62 = 0;
        var _rtmp366;
        this.AuthKindToStatus = {};
        var _ktype63 = 0;
        var _vtype64 = 0;
        _rtmp366 = input.readMapBegin();
        _ktype63 = _rtmp366.ktype;
        _vtype64 = _rtmp366.vtype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          if (_i67 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key68 = null;
          var val69 = null;
          key68 = input.readI32().value;
          val69 = input.readI32().value;
          this.AuthKindToStatus[key68] = val69;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MPermissionCheckResp.prototype.write = function(output) {
  output.writeStructBegin('MPermissionCheckResp');
  if (this.AuthKindToStatus !== null && this.AuthKindToStatus !== undefined) {
    output.writeFieldBegin('AuthKindToStatus', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.AuthKindToStatus));
    for (var kiter70 in this.AuthKindToStatus)
    {
      if (this.AuthKindToStatus.hasOwnProperty(kiter70))
      {
        var viter71 = this.AuthKindToStatus[kiter70];
        output.writeI32(kiter70);
        output.writeI32(viter71);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientConfigExtraReq = function(args) {
  this.AppID = null;
  this.GameID = null;
  this.ConfigType = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.ConfigType !== undefined) {
      this.ConfigType = args.ConfigType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ConfigType is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
ClientConfigExtraReq.prototype = {};
ClientConfigExtraReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.ConfigType = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientConfigExtraReq.prototype.write = function(output) {
  output.writeStructBegin('ClientConfigExtraReq');
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 1);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 2);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.ConfigType !== null && this.ConfigType !== undefined) {
    output.writeFieldBegin('ConfigType', Thrift.Type.I64, 3);
    output.writeI64(this.ConfigType);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientConfigExtraResp = function(args) {
  this.GameID = null;
  this.GameKind = null;
  this.ConfigExtra = null;
  this.BaseResp = null;
  if (args) {
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.GameKind !== undefined) {
      this.GameKind = args.GameKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameKind is unset!');
    }
    if (args.ConfigExtra !== undefined) {
      this.ConfigExtra = args.ConfigExtra;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ConfigExtra is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
ClientConfigExtraResp.prototype = {};
ClientConfigExtraResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.GameKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ConfigExtra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientConfigExtraResp.prototype.write = function(output) {
  output.writeStructBegin('ClientConfigExtraResp');
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 1);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.GameKind !== null && this.GameKind !== undefined) {
    output.writeFieldBegin('GameKind', Thrift.Type.I32, 2);
    output.writeI32(this.GameKind);
    output.writeFieldEnd();
  }
  if (this.ConfigExtra !== null && this.ConfigExtra !== undefined) {
    output.writeFieldBegin('ConfigExtra', Thrift.Type.STRING, 3);
    output.writeString(this.ConfigExtra);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartEffectGameRequest = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.RoomID = null;
  this.effectID = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.RoomID !== undefined) {
      this.RoomID = args.RoomID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RoomID is unset!');
    }
    if (args.effectID !== undefined) {
      this.effectID = args.effectID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field effectID is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
StartEffectGameRequest.prototype = {};
StartEffectGameRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.RoomID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.effectID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartEffectGameRequest.prototype.write = function(output) {
  output.writeStructBegin('StartEffectGameRequest');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.RoomID !== null && this.RoomID !== undefined) {
    output.writeFieldBegin('RoomID', Thrift.Type.I64, 4);
    output.writeI64(this.RoomID);
    output.writeFieldEnd();
  }
  if (this.effectID !== null && this.effectID !== undefined) {
    output.writeFieldBegin('effectID', Thrift.Type.I64, 5);
    output.writeI64(this.effectID);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartEffectGameResponse = function(args) {
  this.EffectPlayID = null;
  this.BaseResp = null;
  if (args) {
    if (args.EffectPlayID !== undefined) {
      this.EffectPlayID = args.EffectPlayID;
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
StartEffectGameResponse.prototype = {};
StartEffectGameResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.EffectPlayID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartEffectGameResponse.prototype.write = function(output) {
  output.writeStructBegin('StartEffectGameResponse');
  if (this.EffectPlayID !== null && this.EffectPlayID !== undefined) {
    output.writeFieldBegin('EffectPlayID', Thrift.Type.I64, 1);
    output.writeI64(this.EffectPlayID);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinishEffectGameRequest = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.RoomID = null;
  this.GameData = null;
  this.IsCutShort = null;
  this.EffectPlayID = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.RoomID !== undefined) {
      this.RoomID = args.RoomID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RoomID is unset!');
    }
    if (args.GameData !== undefined) {
      this.GameData = args.GameData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameData is unset!');
    }
    if (args.IsCutShort !== undefined) {
      this.IsCutShort = args.IsCutShort;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field IsCutShort is unset!');
    }
    if (args.EffectPlayID !== undefined) {
      this.EffectPlayID = args.EffectPlayID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field EffectPlayID is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
FinishEffectGameRequest.prototype = {};
FinishEffectGameRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.RoomID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.GameData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.IsCutShort = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.EffectPlayID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinishEffectGameRequest.prototype.write = function(output) {
  output.writeStructBegin('FinishEffectGameRequest');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.RoomID !== null && this.RoomID !== undefined) {
    output.writeFieldBegin('RoomID', Thrift.Type.I64, 4);
    output.writeI64(this.RoomID);
    output.writeFieldEnd();
  }
  if (this.GameData !== null && this.GameData !== undefined) {
    output.writeFieldBegin('GameData', Thrift.Type.STRING, 5);
    output.writeString(this.GameData);
    output.writeFieldEnd();
  }
  if (this.IsCutShort !== null && this.IsCutShort !== undefined) {
    output.writeFieldBegin('IsCutShort', Thrift.Type.BOOL, 6);
    output.writeBool(this.IsCutShort);
    output.writeFieldEnd();
  }
  if (this.EffectPlayID !== null && this.EffectPlayID !== undefined) {
    output.writeFieldBegin('EffectPlayID', Thrift.Type.I64, 7);
    output.writeI64(this.EffectPlayID);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinishEffectGameResponse = function(args) {
  this.BaseResp = null;
  if (args) {
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
FinishEffectGameResponse.prototype = {};
FinishEffectGameResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinishEffectGameResponse.prototype.write = function(output) {
  output.writeStructBegin('FinishEffectGameResponse');
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DanceMusicStruct = function(args) {
  this.Id = null;
  this.Title = null;
  this.Author = null;
  this.DownloadUrl = null;
  this.CoverUrl = null;
  this.BeatTrackingUrl = null;
  this.Duration = null;
  if (args) {
    if (args.Id !== undefined) {
      this.Id = args.Id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Id is unset!');
    }
    if (args.Title !== undefined) {
      this.Title = args.Title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Title is unset!');
    }
    if (args.Author !== undefined) {
      this.Author = args.Author;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Author is unset!');
    }
    if (args.DownloadUrl !== undefined) {
      this.DownloadUrl = args.DownloadUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field DownloadUrl is unset!');
    }
    if (args.CoverUrl !== undefined) {
      this.CoverUrl = args.CoverUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field CoverUrl is unset!');
    }
    if (args.BeatTrackingUrl !== undefined) {
      this.BeatTrackingUrl = args.BeatTrackingUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BeatTrackingUrl is unset!');
    }
    if (args.Duration !== undefined) {
      this.Duration = args.Duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Duration is unset!');
    }
  }
};
DanceMusicStruct.prototype = {};
DanceMusicStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.Id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.DownloadUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.CoverUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.BeatTrackingUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.Duration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DanceMusicStruct.prototype.write = function(output) {
  output.writeStructBegin('DanceMusicStruct');
  if (this.Id !== null && this.Id !== undefined) {
    output.writeFieldBegin('Id', Thrift.Type.I64, 1);
    output.writeI64(this.Id);
    output.writeFieldEnd();
  }
  if (this.Title !== null && this.Title !== undefined) {
    output.writeFieldBegin('Title', Thrift.Type.STRING, 2);
    output.writeString(this.Title);
    output.writeFieldEnd();
  }
  if (this.Author !== null && this.Author !== undefined) {
    output.writeFieldBegin('Author', Thrift.Type.STRING, 3);
    output.writeString(this.Author);
    output.writeFieldEnd();
  }
  if (this.DownloadUrl !== null && this.DownloadUrl !== undefined) {
    output.writeFieldBegin('DownloadUrl', Thrift.Type.STRING, 4);
    output.writeString(this.DownloadUrl);
    output.writeFieldEnd();
  }
  if (this.CoverUrl !== null && this.CoverUrl !== undefined) {
    output.writeFieldBegin('CoverUrl', Thrift.Type.STRING, 5);
    output.writeString(this.CoverUrl);
    output.writeFieldEnd();
  }
  if (this.BeatTrackingUrl !== null && this.BeatTrackingUrl !== undefined) {
    output.writeFieldBegin('BeatTrackingUrl', Thrift.Type.STRING, 6);
    output.writeString(this.BeatTrackingUrl);
    output.writeFieldEnd();
  }
  if (this.Duration !== null && this.Duration !== undefined) {
    output.writeFieldBegin('Duration', Thrift.Type.I32, 7);
    output.writeI32(this.Duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDanceMusicListRequest = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.RoomID = null;
  this.offset = null;
  this.count = null;
  this.effectID = null;
  this.needBeat = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.RoomID !== undefined) {
      this.RoomID = args.RoomID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RoomID is unset!');
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field offset is unset!');
    }
    if (args.count !== undefined) {
      this.count = args.count;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field count is unset!');
    }
    if (args.effectID !== undefined) {
      this.effectID = args.effectID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field effectID is unset!');
    }
    if (args.needBeat !== undefined) {
      this.needBeat = args.needBeat;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field needBeat is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
GetDanceMusicListRequest.prototype = {};
GetDanceMusicListRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.RoomID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.effectID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.needBeat = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDanceMusicListRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDanceMusicListRequest');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.RoomID !== null && this.RoomID !== undefined) {
    output.writeFieldBegin('RoomID', Thrift.Type.I64, 4);
    output.writeI64(this.RoomID);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 5);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 6);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.effectID !== null && this.effectID !== undefined) {
    output.writeFieldBegin('effectID', Thrift.Type.I64, 7);
    output.writeI64(this.effectID);
    output.writeFieldEnd();
  }
  if (this.needBeat !== null && this.needBeat !== undefined) {
    output.writeFieldBegin('needBeat', Thrift.Type.BOOL, 8);
    output.writeBool(this.needBeat);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDanceMusicListResponse = function(args) {
  this.MusicList = null;
  this.HasMore = null;
  this.BaseResp = null;
  if (args) {
    if (args.MusicList !== undefined) {
      this.MusicList = args.MusicList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field MusicList is unset!');
    }
    if (args.HasMore !== undefined) {
      this.HasMore = args.HasMore;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field HasMore is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
GetDanceMusicListResponse.prototype = {};
GetDanceMusicListResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.MusicList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new DanceMusicStruct();
          elem78.read(input);
          this.MusicList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.HasMore = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDanceMusicListResponse.prototype.write = function(output) {
  output.writeStructBegin('GetDanceMusicListResponse');
  if (this.MusicList !== null && this.MusicList !== undefined) {
    output.writeFieldBegin('MusicList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.MusicList.length);
    for (var iter79 in this.MusicList)
    {
      if (this.MusicList.hasOwnProperty(iter79))
      {
        iter79 = this.MusicList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.HasMore !== null && this.HasMore !== undefined) {
    output.writeFieldBegin('HasMore', Thrift.Type.BOOL, 2);
    output.writeBool(this.HasMore);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RewardItem = function(args) {
  this.StartTime = null;
  this.StopTime = null;
  this.RewardID = null;
  this.RewardInfo = null;
  if (args) {
    if (args.StartTime !== undefined) {
      this.StartTime = args.StartTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field StartTime is unset!');
    }
    if (args.StopTime !== undefined) {
      this.StopTime = args.StopTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field StopTime is unset!');
    }
    if (args.RewardID !== undefined) {
      this.RewardID = args.RewardID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardID is unset!');
    }
    if (args.RewardInfo !== undefined) {
      this.RewardInfo = args.RewardInfo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardInfo is unset!');
    }
  }
};
RewardItem.prototype = {};
RewardItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.StartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.StopTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.RewardID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.RewardInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RewardItem.prototype.write = function(output) {
  output.writeStructBegin('RewardItem');
  if (this.StartTime !== null && this.StartTime !== undefined) {
    output.writeFieldBegin('StartTime', Thrift.Type.I64, 1);
    output.writeI64(this.StartTime);
    output.writeFieldEnd();
  }
  if (this.StopTime !== null && this.StopTime !== undefined) {
    output.writeFieldBegin('StopTime', Thrift.Type.I64, 2);
    output.writeI64(this.StopTime);
    output.writeFieldEnd();
  }
  if (this.RewardID !== null && this.RewardID !== undefined) {
    output.writeFieldBegin('RewardID', Thrift.Type.I64, 3);
    output.writeI64(this.RewardID);
    output.writeFieldEnd();
  }
  if (this.RewardInfo !== null && this.RewardInfo !== undefined) {
    output.writeFieldBegin('RewardInfo', Thrift.Type.STRING, 4);
    output.writeString(this.RewardInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RewardModel = function(args) {
  this.RewardKind = null;
  this.RewardItems = null;
  if (args) {
    if (args.RewardKind !== undefined) {
      this.RewardKind = args.RewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardKind is unset!');
    }
    if (args.RewardItems !== undefined) {
      this.RewardItems = args.RewardItems;
    }
  }
};
RewardModel.prototype = {};
RewardModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.RewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.RewardItems = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new RewardItem();
          elem86.read(input);
          this.RewardItems.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RewardModel.prototype.write = function(output) {
  output.writeStructBegin('RewardModel');
  if (this.RewardKind !== null && this.RewardKind !== undefined) {
    output.writeFieldBegin('RewardKind', Thrift.Type.I32, 1);
    output.writeI32(this.RewardKind);
    output.writeFieldEnd();
  }
  if (this.RewardItems !== null && this.RewardItems !== undefined) {
    output.writeFieldBegin('RewardItems', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.RewardItems.length);
    for (var iter87 in this.RewardItems)
    {
      if (this.RewardItems.hasOwnProperty(iter87))
      {
        iter87 = this.RewardItems[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetRewardInfoRequest = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameKind = null;
  this.GameAppID = null;
  this.Model = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameKind !== undefined) {
      this.GameKind = args.GameKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameKind is unset!');
    }
    if (args.GameAppID !== undefined) {
      this.GameAppID = args.GameAppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameAppID is unset!');
    }
    if (args.Model !== undefined) {
      this.Model = args.Model;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Model is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
SetRewardInfoRequest.prototype = {};
SetRewardInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.GameKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.GameAppID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.Model = new RewardModel();
        this.Model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetRewardInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('SetRewardInfoRequest');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameKind !== null && this.GameKind !== undefined) {
    output.writeFieldBegin('GameKind', Thrift.Type.I32, 4);
    output.writeI32(this.GameKind);
    output.writeFieldEnd();
  }
  if (this.GameAppID !== null && this.GameAppID !== undefined) {
    output.writeFieldBegin('GameAppID', Thrift.Type.I64, 5);
    output.writeI64(this.GameAppID);
    output.writeFieldEnd();
  }
  if (this.Model !== null && this.Model !== undefined) {
    output.writeFieldBegin('Model', Thrift.Type.STRUCT, 6);
    this.Model.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetRewardInfoResponse = function(args) {
  this.BaseResp = null;
  if (args) {
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
SetRewardInfoResponse.prototype = {};
SetRewardInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetRewardInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('SetRewardInfoResponse');
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRewardInfoRequest = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameKind = null;
  this.GameAppID = null;
  this.RewardKind = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameKind !== undefined) {
      this.GameKind = args.GameKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameKind is unset!');
    }
    if (args.GameAppID !== undefined) {
      this.GameAppID = args.GameAppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameAppID is unset!');
    }
    if (args.RewardKind !== undefined) {
      this.RewardKind = args.RewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardKind is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
GetRewardInfoRequest.prototype = {};
GetRewardInfoRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.GameKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.GameAppID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.RewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRewardInfoRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRewardInfoRequest');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameKind !== null && this.GameKind !== undefined) {
    output.writeFieldBegin('GameKind', Thrift.Type.I32, 4);
    output.writeI32(this.GameKind);
    output.writeFieldEnd();
  }
  if (this.GameAppID !== null && this.GameAppID !== undefined) {
    output.writeFieldBegin('GameAppID', Thrift.Type.I64, 5);
    output.writeI64(this.GameAppID);
    output.writeFieldEnd();
  }
  if (this.RewardKind !== null && this.RewardKind !== undefined) {
    output.writeFieldBegin('RewardKind', Thrift.Type.I32, 6);
    output.writeI32(this.RewardKind);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRewardInfoResponse = function(args) {
  this.RewardItems = null;
  this.BaseResp = null;
  if (args) {
    if (args.RewardItems !== undefined) {
      this.RewardItems = args.RewardItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardItems is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
GetRewardInfoResponse.prototype = {};
GetRewardInfoResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.RewardItems = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new RewardItem();
          elem94.read(input);
          this.RewardItems.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRewardInfoResponse.prototype.write = function(output) {
  output.writeStructBegin('GetRewardInfoResponse');
  if (this.RewardItems !== null && this.RewardItems !== undefined) {
    output.writeFieldBegin('RewardItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.RewardItems.length);
    for (var iter95 in this.RewardItems)
    {
      if (this.RewardItems.hasOwnProperty(iter95))
      {
        iter95 = this.RewardItems[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetGameResourceReq = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.GameID = null;
  this.GameResource = null;
  this.Extra = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.GameResource !== undefined) {
      this.GameResource = args.GameResource;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameResource is unset!');
    }
    if (args.Extra !== undefined) {
      this.Extra = args.Extra;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Extra is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
GetGameResourceReq.prototype = {};
GetGameResourceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.GameResource = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.Extra = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGameResourceReq.prototype.write = function(output) {
  output.writeStructBegin('GetGameResourceReq');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.GameResource !== null && this.GameResource !== undefined) {
    output.writeFieldBegin('GameResource', Thrift.Type.I32, 5);
    output.writeI32(this.GameResource);
    output.writeFieldEnd();
  }
  if (this.Extra !== null && this.Extra !== undefined) {
    output.writeFieldBegin('Extra', Thrift.Type.STRING, 6);
    output.writeString(this.Extra);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetGameResourceResp = function(args) {
  this.ResourceList = null;
  this.HasMore = null;
  this.BaseResp = null;
  if (args) {
    if (args.ResourceList !== undefined) {
      this.ResourceList = args.ResourceList;
    }
    if (args.HasMore !== undefined) {
      this.HasMore = args.HasMore;
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
GetGameResourceResp.prototype = {};
GetGameResourceResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.ResourceList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.ResourceList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.HasMore = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGameResourceResp.prototype.write = function(output) {
  output.writeStructBegin('GetGameResourceResp');
  if (this.ResourceList !== null && this.ResourceList !== undefined) {
    output.writeFieldBegin('ResourceList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.ResourceList.length);
    for (var iter103 in this.ResourceList)
    {
      if (this.ResourceList.hasOwnProperty(iter103))
      {
        iter103 = this.ResourceList[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.HasMore !== null && this.HasMore !== undefined) {
    output.writeFieldBegin('HasMore', Thrift.Type.BOOL, 2);
    output.writeBool(this.HasMore);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartGameReq = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.RoomID = null;
  this.GameID = null;
  this.GameData = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.RoomID !== undefined) {
      this.RoomID = args.RoomID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RoomID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.GameData !== undefined) {
      this.GameData = args.GameData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameData is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
StartGameReq.prototype = {};
StartGameReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.RoomID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.GameData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartGameReq.prototype.write = function(output) {
  output.writeStructBegin('StartGameReq');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.RoomID !== null && this.RoomID !== undefined) {
    output.writeFieldBegin('RoomID', Thrift.Type.I64, 4);
    output.writeI64(this.RoomID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 5);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.GameData !== null && this.GameData !== undefined) {
    output.writeFieldBegin('GameData', Thrift.Type.STRING, 6);
    output.writeString(this.GameData);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartGameResp = function(args) {
  this.PlayID = null;
  this.BaseResp = null;
  if (args) {
    if (args.PlayID !== undefined) {
      this.PlayID = args.PlayID;
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
StartGameResp.prototype = {};
StartGameResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.PlayID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartGameResp.prototype.write = function(output) {
  output.writeStructBegin('StartGameResp');
  if (this.PlayID !== null && this.PlayID !== undefined) {
    output.writeFieldBegin('PlayID', Thrift.Type.I64, 1);
    output.writeI64(this.PlayID);
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinishGameReq = function(args) {
  this.LiveID = null;
  this.AppID = null;
  this.UserID = null;
  this.RoomID = null;
  this.GameID = null;
  this.PlayID = null;
  this.GameData = null;
  this.IsShortCut = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.RoomID !== undefined) {
      this.RoomID = args.RoomID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RoomID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.PlayID !== undefined) {
      this.PlayID = args.PlayID;
    }
    if (args.GameData !== undefined) {
      this.GameData = args.GameData;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameData is unset!');
    }
    if (args.IsShortCut !== undefined) {
      this.IsShortCut = args.IsShortCut;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field IsShortCut is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    }
  }
};
FinishGameReq.prototype = {};
FinishGameReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.RoomID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.PlayID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.GameData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.IsShortCut = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinishGameReq.prototype.write = function(output) {
  output.writeStructBegin('FinishGameReq');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 1);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 2);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 3);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.RoomID !== null && this.RoomID !== undefined) {
    output.writeFieldBegin('RoomID', Thrift.Type.I64, 4);
    output.writeI64(this.RoomID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 5);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.PlayID !== null && this.PlayID !== undefined) {
    output.writeFieldBegin('PlayID', Thrift.Type.I64, 6);
    output.writeI64(this.PlayID);
    output.writeFieldEnd();
  }
  if (this.GameData !== null && this.GameData !== undefined) {
    output.writeFieldBegin('GameData', Thrift.Type.STRING, 7);
    output.writeString(this.GameData);
    output.writeFieldEnd();
  }
  if (this.IsShortCut !== null && this.IsShortCut !== undefined) {
    output.writeFieldBegin('IsShortCut', Thrift.Type.BOOL, 8);
    output.writeBool(this.IsShortCut);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinishGameResp = function(args) {
  this.BaseResp = null;
  if (args) {
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    }
  }
};
FinishGameResp.prototype = {};
FinishGameResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FinishGameResp.prototype.write = function(output) {
  output.writeStructBegin('FinishGameResp');
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MAddRewardReq = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameID = null;
  this.rewardKind = null;
  this.RewardItems = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.rewardKind !== undefined) {
      this.rewardKind = args.rewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rewardKind is unset!');
    }
    if (args.RewardItems !== undefined) {
      this.RewardItems = args.RewardItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardItems is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
MAddRewardReq.prototype = {};
MAddRewardReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.rewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.RewardItems = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new RewardItem();
          elem110.read(input);
          this.RewardItems.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MAddRewardReq.prototype.write = function(output) {
  output.writeStructBegin('MAddRewardReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.rewardKind !== null && this.rewardKind !== undefined) {
    output.writeFieldBegin('rewardKind', Thrift.Type.I32, 5);
    output.writeI32(this.rewardKind);
    output.writeFieldEnd();
  }
  if (this.RewardItems !== null && this.RewardItems !== undefined) {
    output.writeFieldBegin('RewardItems', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.RewardItems.length);
    for (var iter111 in this.RewardItems)
    {
      if (this.RewardItems.hasOwnProperty(iter111))
      {
        iter111 = this.RewardItems[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MAddRewardResp = function(args) {
  this.resp = null;
  this.BaseResp = null;
  if (args) {
    if (args.resp !== undefined) {
      this.resp = args.resp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resp is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
MAddRewardResp.prototype = {};
MAddRewardResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.resp = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString().value;
          this.resp.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MAddRewardResp.prototype.write = function(output) {
  output.writeStructBegin('MAddRewardResp');
  if (this.resp !== null && this.resp !== undefined) {
    output.writeFieldBegin('resp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.resp.length);
    for (var iter119 in this.resp)
    {
      if (this.resp.hasOwnProperty(iter119))
      {
        iter119 = this.resp[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRewardReq = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameID = null;
  this.RewardKind = null;
  this.Offset = null;
  this.Count = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.RewardKind !== undefined) {
      this.RewardKind = args.RewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardKind is unset!');
    }
    if (args.Offset !== undefined) {
      this.Offset = args.Offset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Offset is unset!');
    }
    if (args.Count !== undefined) {
      this.Count = args.Count;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Count is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
GetRewardReq.prototype = {};
GetRewardReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.RewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.Offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.Count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRewardReq.prototype.write = function(output) {
  output.writeStructBegin('GetRewardReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.RewardKind !== null && this.RewardKind !== undefined) {
    output.writeFieldBegin('RewardKind', Thrift.Type.I32, 5);
    output.writeI32(this.RewardKind);
    output.writeFieldEnd();
  }
  if (this.Offset !== null && this.Offset !== undefined) {
    output.writeFieldBegin('Offset', Thrift.Type.I64, 6);
    output.writeI64(this.Offset);
    output.writeFieldEnd();
  }
  if (this.Count !== null && this.Count !== undefined) {
    output.writeFieldBegin('Count', Thrift.Type.I64, 7);
    output.writeI64(this.Count);
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetRewardResp = function(args) {
  this.RewardItems = null;
  this.BaseResp = null;
  if (args) {
    if (args.RewardItems !== undefined) {
      this.RewardItems = args.RewardItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardItems is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
GetRewardResp.prototype = {};
GetRewardResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.RewardItems = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new RewardItem();
          elem126.read(input);
          this.RewardItems.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRewardResp.prototype.write = function(output) {
  output.writeStructBegin('GetRewardResp');
  if (this.RewardItems !== null && this.RewardItems !== undefined) {
    output.writeFieldBegin('RewardItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.RewardItems.length);
    for (var iter127 in this.RewardItems)
    {
      if (this.RewardItems.hasOwnProperty(iter127))
      {
        iter127 = this.RewardItems[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MDeleteRewardReq = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameID = null;
  this.RewardKind = null;
  this.RewardIDList = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.RewardKind !== undefined) {
      this.RewardKind = args.RewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardKind is unset!');
    }
    if (args.RewardIDList !== undefined) {
      this.RewardIDList = args.RewardIDList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardIDList is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
MDeleteRewardReq.prototype = {};
MDeleteRewardReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.RewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.RewardIDList = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readI64().value;
          this.RewardIDList.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MDeleteRewardReq.prototype.write = function(output) {
  output.writeStructBegin('MDeleteRewardReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.RewardKind !== null && this.RewardKind !== undefined) {
    output.writeFieldBegin('RewardKind', Thrift.Type.I32, 5);
    output.writeI32(this.RewardKind);
    output.writeFieldEnd();
  }
  if (this.RewardIDList !== null && this.RewardIDList !== undefined) {
    output.writeFieldBegin('RewardIDList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.RewardIDList.length);
    for (var iter135 in this.RewardIDList)
    {
      if (this.RewardIDList.hasOwnProperty(iter135))
      {
        iter135 = this.RewardIDList[iter135];
        output.writeI64(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MDeleteRewardResp = function(args) {
  this.resp = null;
  this.BaseResp = null;
  if (args) {
    if (args.resp !== undefined) {
      this.resp = args.resp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resp is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
MDeleteRewardResp.prototype = {};
MDeleteRewardResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.resp = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString().value;
          this.resp.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MDeleteRewardResp.prototype.write = function(output) {
  output.writeStructBegin('MDeleteRewardResp');
  if (this.resp !== null && this.resp !== undefined) {
    output.writeFieldBegin('resp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.resp.length);
    for (var iter143 in this.resp)
    {
      if (this.resp.hasOwnProperty(iter143))
      {
        iter143 = this.resp[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MUpdateRewardReq = function(args) {
  this.UserID = null;
  this.LiveID = null;
  this.AppID = null;
  this.GameID = null;
  this.rewardKind = null;
  this.RewardItems = null;
  this.RequestInfoV2 = null;
  this.Base = null;
  if (args) {
    if (args.UserID !== undefined) {
      this.UserID = args.UserID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserID is unset!');
    }
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.AppID !== undefined) {
      this.AppID = args.AppID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AppID is unset!');
    }
    if (args.GameID !== undefined) {
      this.GameID = args.GameID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field GameID is unset!');
    }
    if (args.rewardKind !== undefined) {
      this.rewardKind = args.rewardKind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rewardKind is unset!');
    }
    if (args.RewardItems !== undefined) {
      this.RewardItems = args.RewardItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RewardItems is unset!');
    }
    if (args.RequestInfoV2 !== undefined) {
      this.RequestInfoV2 = args.RequestInfoV2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field RequestInfoV2 is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
MUpdateRewardReq.prototype = {};
MUpdateRewardReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.UserID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.LiveID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AppID = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.GameID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.rewardKind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.RewardItems = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new RewardItem();
          elem150.read(input);
          this.RewardItems.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 250:
      if (ftype == Thrift.Type.STRUCT) {
        this.RequestInfoV2 = new RequestInfoV2();
        this.RequestInfoV2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MUpdateRewardReq.prototype.write = function(output) {
  output.writeStructBegin('MUpdateRewardReq');
  if (this.UserID !== null && this.UserID !== undefined) {
    output.writeFieldBegin('UserID', Thrift.Type.I64, 1);
    output.writeI64(this.UserID);
    output.writeFieldEnd();
  }
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I32, 2);
    output.writeI32(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.AppID !== null && this.AppID !== undefined) {
    output.writeFieldBegin('AppID', Thrift.Type.I32, 3);
    output.writeI32(this.AppID);
    output.writeFieldEnd();
  }
  if (this.GameID !== null && this.GameID !== undefined) {
    output.writeFieldBegin('GameID', Thrift.Type.I64, 4);
    output.writeI64(this.GameID);
    output.writeFieldEnd();
  }
  if (this.rewardKind !== null && this.rewardKind !== undefined) {
    output.writeFieldBegin('rewardKind', Thrift.Type.I32, 5);
    output.writeI32(this.rewardKind);
    output.writeFieldEnd();
  }
  if (this.RewardItems !== null && this.RewardItems !== undefined) {
    output.writeFieldBegin('RewardItems', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.RewardItems.length);
    for (var iter151 in this.RewardItems)
    {
      if (this.RewardItems.hasOwnProperty(iter151))
      {
        iter151 = this.RewardItems[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.RequestInfoV2 !== null && this.RequestInfoV2 !== undefined) {
    output.writeFieldBegin('RequestInfoV2', Thrift.Type.STRUCT, 250);
    this.RequestInfoV2.write(output);
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MUpdateRewardResp = function(args) {
  this.resp = null;
  this.BaseResp = null;
  if (args) {
    if (args.resp !== undefined) {
      this.resp = args.resp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resp is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
MUpdateRewardResp.prototype = {};
MUpdateRewardResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.resp = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = input.readString().value;
          this.resp.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MUpdateRewardResp.prototype.write = function(output) {
  output.writeStructBegin('MUpdateRewardResp');
  if (this.resp !== null && this.resp !== undefined) {
    output.writeFieldBegin('resp', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.resp.length);
    for (var iter159 in this.resp)
    {
      if (this.resp.hasOwnProperty(iter159))
      {
        iter159 = this.resp[iter159];
        output.writeString(iter159);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlaySwitchItem = function(args) {
  this.AnchorID = null;
  this.PlaySwitch = null;
  if (args) {
    if (args.AnchorID !== undefined) {
      this.AnchorID = args.AnchorID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field AnchorID is unset!');
    }
    if (args.PlaySwitch !== undefined) {
      this.PlaySwitch = args.PlaySwitch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field PlaySwitch is unset!');
    }
  }
};
PlaySwitchItem.prototype = {};
PlaySwitchItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.AnchorID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.PlaySwitch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaySwitchItem.prototype.write = function(output) {
  output.writeStructBegin('PlaySwitchItem');
  if (this.AnchorID !== null && this.AnchorID !== undefined) {
    output.writeFieldBegin('AnchorID', Thrift.Type.I64, 1);
    output.writeI64(this.AnchorID);
    output.writeFieldEnd();
  }
  if (this.PlaySwitch !== null && this.PlaySwitch !== undefined) {
    output.writeFieldBegin('PlaySwitch', Thrift.Type.I32, 2);
    output.writeI32(this.PlaySwitch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MGetPlaySwitchReq = function(args) {
  this.LiveID = null;
  this.ReqItems = null;
  this.Base = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.ReqItems !== undefined) {
      this.ReqItems = args.ReqItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ReqItems is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
MGetPlaySwitchReq.prototype = {};
MGetPlaySwitchReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.LiveID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.ReqItems = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new PlaySwitchItem();
          elem166.read(input);
          this.ReqItems.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MGetPlaySwitchReq.prototype.write = function(output) {
  output.writeStructBegin('MGetPlaySwitchReq');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I64, 1);
    output.writeI64(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.ReqItems !== null && this.ReqItems !== undefined) {
    output.writeFieldBegin('ReqItems', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ReqItems.length);
    for (var iter167 in this.ReqItems)
    {
      if (this.ReqItems.hasOwnProperty(iter167))
      {
        iter167 = this.ReqItems[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MGetPlaySwitchResp = function(args) {
  this.UserToPlaySwitch = null;
  this.BaseResp = null;
  if (args) {
    if (args.UserToPlaySwitch !== undefined) {
      this.UserToPlaySwitch = args.UserToPlaySwitch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field UserToPlaySwitch is unset!');
    }
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
MGetPlaySwitchResp.prototype = {};
MGetPlaySwitchResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size168 = 0;
        var _rtmp3172;
        this.UserToPlaySwitch = {};
        var _ktype169 = 0;
        var _vtype170 = 0;
        _rtmp3172 = input.readMapBegin();
        _ktype169 = _rtmp3172.ktype;
        _vtype170 = _rtmp3172.vtype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          if (_i173 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key174 = null;
          var val175 = null;
          key174 = input.readI64().value;
          var _size176 = 0;
          var _rtmp3180;
          val175 = {};
          var _ktype177 = 0;
          var _vtype178 = 0;
          _rtmp3180 = input.readMapBegin();
          _ktype177 = _rtmp3180.ktype;
          _vtype178 = _rtmp3180.vtype;
          _size176 = _rtmp3180.size;
          for (var _i181 = 0; _i181 < _size176; ++_i181)
          {
            if (_i181 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key182 = null;
            var val183 = null;
            key182 = input.readI32().value;
            val183 = input.readBool().value;
            val175[key182] = val183;
          }
          input.readMapEnd();
          this.UserToPlaySwitch[key174] = val175;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MGetPlaySwitchResp.prototype.write = function(output) {
  output.writeStructBegin('MGetPlaySwitchResp');
  if (this.UserToPlaySwitch !== null && this.UserToPlaySwitch !== undefined) {
    output.writeFieldBegin('UserToPlaySwitch', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.UserToPlaySwitch));
    for (var kiter184 in this.UserToPlaySwitch)
    {
      if (this.UserToPlaySwitch.hasOwnProperty(kiter184))
      {
        var viter185 = this.UserToPlaySwitch[kiter184];
        output.writeI64(kiter184);
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.BOOL, Thrift.objectLength(viter185));
        for (var kiter186 in viter185)
        {
          if (viter185.hasOwnProperty(kiter186))
          {
            var viter187 = viter185[kiter186];
            output.writeI32(kiter186);
            output.writeBool(viter187);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlaySwitchUpdateReqItem = function(args) {
  this.LiveID = null;
  this.PlaySwitchItem = null;
  this.Enable = null;
  this.Updater = null;
  if (args) {
    if (args.LiveID !== undefined) {
      this.LiveID = args.LiveID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field LiveID is unset!');
    }
    if (args.PlaySwitchItem !== undefined) {
      this.PlaySwitchItem = args.PlaySwitchItem;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field PlaySwitchItem is unset!');
    }
    if (args.Enable !== undefined) {
      this.Enable = args.Enable;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Enable is unset!');
    }
    if (args.Updater !== undefined) {
      this.Updater = args.Updater;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Updater is unset!');
    }
  }
};
PlaySwitchUpdateReqItem.prototype = {};
PlaySwitchUpdateReqItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.LiveID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.PlaySwitchItem = new PlaySwitchItem();
        this.PlaySwitchItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.Enable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Updater = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaySwitchUpdateReqItem.prototype.write = function(output) {
  output.writeStructBegin('PlaySwitchUpdateReqItem');
  if (this.LiveID !== null && this.LiveID !== undefined) {
    output.writeFieldBegin('LiveID', Thrift.Type.I64, 1);
    output.writeI64(this.LiveID);
    output.writeFieldEnd();
  }
  if (this.PlaySwitchItem !== null && this.PlaySwitchItem !== undefined) {
    output.writeFieldBegin('PlaySwitchItem', Thrift.Type.STRUCT, 2);
    this.PlaySwitchItem.write(output);
    output.writeFieldEnd();
  }
  if (this.Enable !== null && this.Enable !== undefined) {
    output.writeFieldBegin('Enable', Thrift.Type.BOOL, 3);
    output.writeBool(this.Enable);
    output.writeFieldEnd();
  }
  if (this.Updater !== null && this.Updater !== undefined) {
    output.writeFieldBegin('Updater', Thrift.Type.STRING, 4);
    output.writeString(this.Updater);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MUpdatePlaySwitchReq = function(args) {
  this.ReqItems = null;
  this.Base = null;
  if (args) {
    if (args.ReqItems !== undefined) {
      this.ReqItems = args.ReqItems;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ReqItems is unset!');
    }
    if (args.Base !== undefined) {
      this.Base = args.Base;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Base is unset!');
    }
  }
};
MUpdatePlaySwitchReq.prototype = {};
MUpdatePlaySwitchReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.ReqItems = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new PlaySwitchUpdateReqItem();
          elem194.read(input);
          this.ReqItems.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.Base = new Base();
        this.Base.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MUpdatePlaySwitchReq.prototype.write = function(output) {
  output.writeStructBegin('MUpdatePlaySwitchReq');
  if (this.ReqItems !== null && this.ReqItems !== undefined) {
    output.writeFieldBegin('ReqItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ReqItems.length);
    for (var iter195 in this.ReqItems)
    {
      if (this.ReqItems.hasOwnProperty(iter195))
      {
        iter195 = this.ReqItems[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Base !== null && this.Base !== undefined) {
    output.writeFieldBegin('Base', Thrift.Type.STRUCT, 255);
    this.Base.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MUpdatePlaySwitchResp = function(args) {
  this.BaseResp = null;
  if (args) {
    if (args.BaseResp !== undefined) {
      this.BaseResp = args.BaseResp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field BaseResp is unset!');
    }
  }
};
MUpdatePlaySwitchResp.prototype = {};
MUpdatePlaySwitchResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 255:
      if (ftype == Thrift.Type.STRUCT) {
        this.BaseResp = new BaseResp();
        this.BaseResp.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MUpdatePlaySwitchResp.prototype.write = function(output) {
  output.writeStructBegin('MUpdatePlaySwitchResp');
  if (this.BaseResp !== null && this.BaseResp !== undefined) {
    output.writeFieldBegin('BaseResp', Thrift.Type.STRUCT, 255);
    this.BaseResp.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

